
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00001620  000016b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001620  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  008001f2  008001f2  000017a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041a2  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017e1  00000000  00000000  00005ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001531  00000000  00000000  000072bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  000087ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000de4  00000000  00000000  00008c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021d0  00000000  00000000  00009a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000bc14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_11>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_14>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
      68:	42 07       	cpc	r20, r18
      6a:	49 07       	cpc	r20, r25
      6c:	41 08       	sbc	r4, r1

0000006e <__ctors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf ef       	ldi	r28, 0xFF	; 255
      74:	d8 e0       	ldi	r29, 0x08	; 8
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	a0 e0       	ldi	r26, 0x00	; 0
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	e0 e2       	ldi	r30, 0x20	; 32
      82:	f6 e1       	ldi	r31, 0x16	; 22
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	a2 3f       	cpi	r26, 0xF2	; 242
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	22 e0       	ldi	r18, 0x02	; 2
      92:	a2 ef       	ldi	r26, 0xF2	; 242
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	ad 32       	cpi	r26, 0x2D	; 45
      9c:	b2 07       	cpc	r27, r18
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	c7 e3       	ldi	r28, 0x37	; 55
      a4:	d0 e0       	ldi	r29, 0x00	; 0
      a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
      a8:	21 97       	sbiw	r28, 0x01	; 1
      aa:	fe 01       	movw	r30, r28
      ac:	0e 94 08 0b 	call	0x1610	; 0x1610 <__tablejump2__>
      b0:	c4 33       	cpi	r28, 0x34	; 52
      b2:	d1 07       	cpc	r29, r17
      b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
      b6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <main>
      ba:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <_Z10get_numberRhhhh>:
#include "input.h"

#include "time_utilities.h"
#include "display.h"

bool get_number(uint8_t& x, uint8_t step, uint8_t abort_on, uint8_t abort_sec){
      c2:	2f 92       	push	r2
      c4:	3f 92       	push	r3
      c6:	4f 92       	push	r4
      c8:	5f 92       	push	r5
      ca:	6f 92       	push	r6
      cc:	7f 92       	push	r7
      ce:	8f 92       	push	r8
      d0:	9f 92       	push	r9
      d2:	af 92       	push	r10
      d4:	bf 92       	push	r11
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	00 d0       	rcall	.+0      	; 0xe8 <_Z10get_numberRhhhh+0x26>
      e8:	00 d0       	rcall	.+0      	; 0xea <_Z10get_numberRhhhh+0x28>
      ea:	1f 92       	push	r1
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	4c 01       	movw	r8, r24
      f2:	69 83       	std	Y+1, r22	; 0x01
      f4:	b4 2f       	mov	r27, r20

	void set();

	inline uint64_t now() const {
		fsl::hw::stupid_atomic atomic;
		auto copy = human_clock_seconds;
      f6:	e2 ef       	ldi	r30, 0xF2	; 242
      f8:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (ok){
			return true;
		}
		if (up){
			if (255 - x < step) {
      fa:	46 2f       	mov	r20, r22
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	5b 83       	std	Y+3, r21	; 0x03
     100:	4a 83       	std	Y+2, r20	; 0x02
				x = 255;
     102:	6b 2f       	mov	r22, r27
     104:	72 2f       	mov	r23, r18
	button 0 -> up
	*/
	uint64_t stamp{ 0 };
	while (true)
	{
		set_led(x);
     106:	d4 01       	movw	r26, r8
     108:	8c 91       	ld	r24, X

#include <avr/io.h>


inline void set_led(uint8_t x){
	PORTB = x;
     10a:	85 b9       	out	0x05, r24	; 5
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     110:	a5 e6       	ldi	r26, 0x65	; 101
     112:	b9 e0       	ldi	r27, 0x09	; 9
     114:	11 97       	sbiw	r26, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <_Z10get_numberRhhhh+0x52>
     118:	01 96       	adiw	r24, 0x01	; 1

#include <util/delay.h>


inline void sleep(uint32_t ms){
	for (uint32_t i = 0; i < ms/10; ++i) _delay_ms(10);
     11a:	86 34       	cpi	r24, 0x46	; 70
     11c:	91 05       	cpc	r25, r1
     11e:	c1 f7       	brne	.-16     	; 0x110 <_Z10get_numberRhhhh+0x4e>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     120:	f8 94       	cli

	void set();

	inline uint64_t now() const {
		fsl::hw::stupid_atomic atomic;
		auto copy = human_clock_seconds;
     122:	20 80       	ld	r2, Z
     124:	31 80       	ldd	r3, Z+1	; 0x01
     126:	42 80       	ldd	r4, Z+2	; 0x02
     128:	53 80       	ldd	r5, Z+3	; 0x03
     12a:	64 80       	ldd	r6, Z+4	; 0x04
     12c:	75 80       	ldd	r7, Z+5	; 0x05
     12e:	96 81       	ldd	r25, Z+6	; 0x06
     130:	27 81       	ldd	r18, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     132:	78 94       	sei
     134:	b6 2f       	mov	r27, r22
     136:	a7 2f       	mov	r26, r23
     138:	9d 83       	std	Y+5, r25	; 0x05
     13a:	2c 83       	std	Y+4, r18	; 0x04
		sleep(700);
		stamp  = human_clock::instance().now();
		bool ok, down, up;
		while (true){
			if (abort_sec) if (human_clock::instance().now() - stamp >= abort_sec) return false;
     13c:	aa 23       	and	r26, r26
     13e:	f9 f0       	breq	.+62     	; 0x17e <_Z10get_numberRhhhh+0xbc>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     140:	f8 94       	cli
     142:	20 81       	ld	r18, Z
     144:	31 81       	ldd	r19, Z+1	; 0x01
     146:	42 81       	ldd	r20, Z+2	; 0x02
     148:	53 81       	ldd	r21, Z+3	; 0x03
     14a:	64 81       	ldd	r22, Z+4	; 0x04
     14c:	75 81       	ldd	r23, Z+5	; 0x05
     14e:	86 81       	ldd	r24, Z+6	; 0x06
     150:	97 81       	ldd	r25, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     152:	78 94       	sei
     154:	a2 2c       	mov	r10, r2
     156:	b3 2c       	mov	r11, r3
     158:	c4 2c       	mov	r12, r4
     15a:	d5 2c       	mov	r13, r5
     15c:	e6 2c       	mov	r14, r6
     15e:	f7 2c       	mov	r15, r7
     160:	0d 81       	ldd	r16, Y+5	; 0x05
     162:	1c 81       	ldd	r17, Y+4	; 0x04
     164:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__subdi3>
     168:	aa 2e       	mov	r10, r26
     16a:	b1 2c       	mov	r11, r1
     16c:	c1 2c       	mov	r12, r1
     16e:	d1 2c       	mov	r13, r1
     170:	e1 2c       	mov	r14, r1
     172:	f1 2c       	mov	r15, r1
     174:	00 e0       	ldi	r16, 0x00	; 0
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__cmpdi2>
     17c:	a8 f5       	brcc	.+106    	; 0x1e8 <_Z10get_numberRhhhh+0x126>
inline bool get_button(uint8_t i){
	return !(PIND & (1 << i));
}

inline uint8_t get_buttons(){
	return ~PIND;
     17e:	89 b1       	in	r24, 0x09	; 9
			if (get_buttons() & abort_on) return false;
     180:	80 95       	com	r24
     182:	8b 23       	and	r24, r27
     184:	99 f5       	brne	.+102    	; 0x1ec <_Z10get_numberRhhhh+0x12a>

#include <avr/io.h>


inline bool get_button(uint8_t i){
	return !(PIND & (1 << i));
     186:	29 b1       	in	r18, 0x09	; 9
     188:	89 b1       	in	r24, 0x09	; 9
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	99 b1       	in	r25, 0x09	; 9
     18e:	92 70       	andi	r25, 0x02	; 2
			ok = get_button(2);
			up = get_button(0);
			down = get_button(1);
			if ( ok || up || down ) break;
     190:	22 ff       	sbrs	r18, 2
     192:	2e c0       	rjmp	.+92     	; 0x1f0 <_Z10get_numberRhhhh+0x12e>
     194:	88 23       	and	r24, r24
     196:	19 f0       	breq	.+6      	; 0x19e <_Z10get_numberRhhhh+0xdc>
     198:	91 11       	cpse	r25, r1
     19a:	d0 cf       	rjmp	.-96     	; 0x13c <_Z10get_numberRhhhh+0x7a>
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <_Z10get_numberRhhhh+0x108>
     19e:	6b 2f       	mov	r22, r27
     1a0:	7a 2f       	mov	r23, r26
		}
		if (ok){
			return true;
		}
		if (up){
			if (255 - x < step) {
     1a2:	d4 01       	movw	r26, r8
     1a4:	8c 91       	ld	r24, X
     1a6:	2f ef       	ldi	r18, 0xFF	; 255
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	28 1b       	sub	r18, r24
     1ac:	31 09       	sbc	r19, r1
     1ae:	aa 81       	ldd	r26, Y+2	; 0x02
     1b0:	bb 81       	ldd	r27, Y+3	; 0x03
     1b2:	2a 17       	cp	r18, r26
     1b4:	3b 07       	cpc	r19, r27
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <_Z10get_numberRhhhh+0xfe>
				x = 255;
     1b8:	4f ef       	ldi	r20, 0xFF	; 255
     1ba:	d4 01       	movw	r26, r8
     1bc:	4c 93       	st	X, r20
     1be:	a3 cf       	rjmp	.-186    	; 0x106 <_Z10get_numberRhhhh+0x44>
				} else {
				x += step;
     1c0:	a9 81       	ldd	r26, Y+1	; 0x01
     1c2:	8a 0f       	add	r24, r26
     1c4:	d4 01       	movw	r26, r8
     1c6:	8c 93       	st	X, r24
     1c8:	9e cf       	rjmp	.-196    	; 0x106 <_Z10get_numberRhhhh+0x44>
     1ca:	6b 2f       	mov	r22, r27
     1cc:	7a 2f       	mov	r23, r26
			}
			continue;
		}
		if (down){
			if (step > x) {
     1ce:	d4 01       	movw	r26, r8
     1d0:	8c 91       	ld	r24, X
     1d2:	b9 81       	ldd	r27, Y+1	; 0x01
     1d4:	8b 17       	cp	r24, r27
     1d6:	18 f4       	brcc	.+6      	; 0x1de <_Z10get_numberRhhhh+0x11c>
				x = 0;
     1d8:	d4 01       	movw	r26, r8
     1da:	1c 92       	st	X, r1
     1dc:	94 cf       	rjmp	.-216    	; 0x106 <_Z10get_numberRhhhh+0x44>
				} else {
				x -= step;
     1de:	b9 81       	ldd	r27, Y+1	; 0x01
     1e0:	8b 1b       	sub	r24, r27
     1e2:	d4 01       	movw	r26, r8
     1e4:	8c 93       	st	X, r24
     1e6:	8f cf       	rjmp	.-226    	; 0x106 <_Z10get_numberRhhhh+0x44>
		set_led(x);
		sleep(700);
		stamp  = human_clock::instance().now();
		bool ok, down, up;
		while (true){
			if (abort_sec) if (human_clock::instance().now() - stamp >= abort_sec) return false;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <_Z10get_numberRhhhh+0x130>
			if (get_buttons() & abort_on) return false;
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <_Z10get_numberRhhhh+0x130>
			up = get_button(0);
			down = get_button(1);
			if ( ok || up || down ) break;
		}
		if (ok){
			return true;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
			}
			continue;
		}
	}
	
}
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	7f 90       	pop	r7
     216:	6f 90       	pop	r6
     218:	5f 90       	pop	r5
     21a:	4f 90       	pop	r4
     21c:	3f 90       	pop	r3
     21e:	2f 90       	pop	r2
     220:	08 95       	ret

00000222 <_Z8pin_initv>:
PD: input buttons
PB: + led mixed: 7seg + single led
******/

void pin_init(){
	DDRC |=  0b00011111; // safe_on led : relay: ventile2, ventile1, ventile0
     222:	87 b1       	in	r24, 0x07	; 7
     224:	8f 61       	ori	r24, 0x1F	; 31
     226:	87 b9       	out	0x07, r24	; 7
	//DDRC &= ~0b00000100;
	PORTC = 0;
     228:	18 b8       	out	0x08, r1	; 8

	DDRD &= ~0b11111111; // in button
     22a:	8a b1       	in	r24, 0x0a	; 10
     22c:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b11111111; // pull-up internal on.
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8b b9       	out	0x0b, r24	; 11

	DDRB = 0b11111111; // single leds.
     232:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
     234:	15 b8       	out	0x05, r1	; 5
     236:	08 95       	ret

00000238 <_Z11init_timersv>:

using timer_array = timer[NUM_TIMERS];

timer_array all_timers;

void init_timers(){
     238:	e0 e0       	ldi	r30, 0x00	; 0
     23a:	f1 e0       	ldi	r31, 0x01	; 1
     23c:	20 ef       	ldi	r18, 0xF0	; 240
     23e:	31 e0       	ldi	r19, 0x01	; 1
	for (uint8_t i = 0; i < NUM_TIMERS; ++i){
		all_timers[i].ventile = 255;
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	80 83       	st	Z, r24
     244:	3c 96       	adiw	r30, 0x0c	; 12
using timer_array = timer[NUM_TIMERS];

timer_array all_timers;

void init_timers(){
	for (uint8_t i = 0; i < NUM_TIMERS; ++i){
     246:	e2 17       	cp	r30, r18
     248:	f3 07       	cpc	r31, r19
     24a:	d9 f7       	brne	.-10     	; 0x242 <_Z11init_timersv+0xa>
		all_timers[i].ventile = 255;
	}
}
     24c:	08 95       	ret

0000024e <_Z14execute_timersv>:

void execute_timers(){
     24e:	6f 92       	push	r6
     250:	7f 92       	push	r7
     252:	8f 92       	push	r8
     254:	9f 92       	push	r9
     256:	af 92       	push	r10
     258:	bf 92       	push	r11
     25a:	cf 92       	push	r12
     25c:	df 92       	push	r13
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	c0 e0       	ldi	r28, 0x00	; 0
     26c:	d1 e0       	ldi	r29, 0x01	; 1
     26e:	0f 2e       	mov	r0, r31
     270:	f0 ef       	ldi	r31, 0xF0	; 240
     272:	6f 2e       	mov	r6, r31
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	7f 2e       	mov	r7, r31
     278:	f0 2d       	mov	r31, r0
	uint64_t last_executed{ 0 };
	
	inline bool invalid(){ return ventile == 255; }
	
	void execute(){
		if (!global_timer_enable) return;
     27a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZN5timer19global_timer_enableE>
     27e:	88 23       	and	r24, r24
     280:	09 f4       	brne	.+2      	; 0x284 <_Z14execute_timersv+0x36>
     282:	70 c0       	rjmp	.+224    	; 0x364 <_Z14execute_timersv+0x116>
		if (invalid()) return;
     284:	88 81       	ld	r24, Y
     286:	8f 3f       	cpi	r24, 0xFF	; 255
     288:	09 f4       	brne	.+2      	; 0x28c <_Z14execute_timersv+0x3e>
     28a:	6c c0       	rjmp	.+216    	; 0x364 <_Z14execute_timersv+0x116>
		bool enable = (the_clock.minute_of_day() == minute_at_day) && (the_clock.now() > last_executed);
     28c:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <the_clock>
     290:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     294:	f8 94       	cli
     296:	20 81       	ld	r18, Z
     298:	31 81       	ldd	r19, Z+1	; 0x01
     29a:	42 81       	ldd	r20, Z+2	; 0x02
     29c:	53 81       	ldd	r21, Z+3	; 0x03
     29e:	64 81       	ldd	r22, Z+4	; 0x04
     2a0:	75 81       	ldd	r23, Z+5	; 0x05
     2a2:	86 81       	ldd	r24, Z+6	; 0x06
     2a4:	97 81       	ldd	r25, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     2a6:	78 94       	sei
     2a8:	68 94       	set
     2aa:	aa 24       	eor	r10, r10
     2ac:	a7 f8       	bld	r10, 7
     2ae:	0f 2e       	mov	r0, r31
     2b0:	f1 e5       	ldi	r31, 0x51	; 81
     2b2:	bf 2e       	mov	r11, r31
     2b4:	f0 2d       	mov	r31, r0
     2b6:	cc 24       	eor	r12, r12
     2b8:	c3 94       	inc	r12
     2ba:	d1 2c       	mov	r13, r1
     2bc:	e1 2c       	mov	r14, r1
     2be:	f1 2c       	mov	r15, r1
     2c0:	00 e0       	ldi	r16, 0x00	; 0
     2c2:	10 e0       	ldi	r17, 0x00	; 0
     2c4:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
     2c8:	0f 2e       	mov	r0, r31
     2ca:	fc e3       	ldi	r31, 0x3C	; 60
     2cc:	af 2e       	mov	r10, r31
     2ce:	f0 2d       	mov	r31, r0
     2d0:	b1 2c       	mov	r11, r1
     2d2:	c1 2c       	mov	r12, r1
     2d4:	0e 94 5f 0a 	call	0x14be	; 0x14be <__udivdi3>
     2d8:	a2 2e       	mov	r10, r18
     2da:	b3 2e       	mov	r11, r19
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	9b 81       	ldd	r25, Y+3	; 0x03
     2e0:	8a 15       	cp	r24, r10
     2e2:	9b 05       	cpc	r25, r11
     2e4:	09 f0       	breq	.+2      	; 0x2e8 <_Z14execute_timersv+0x9a>
     2e6:	3e c0       	rjmp	.+124    	; 0x364 <_Z14execute_timersv+0x116>
     2e8:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <the_clock>
     2ec:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     2f0:	f8 94       	cli
     2f2:	20 81       	ld	r18, Z
     2f4:	31 81       	ldd	r19, Z+1	; 0x01
     2f6:	42 81       	ldd	r20, Z+2	; 0x02
     2f8:	53 81       	ldd	r21, Z+3	; 0x03
     2fa:	64 81       	ldd	r22, Z+4	; 0x04
     2fc:	75 81       	ldd	r23, Z+5	; 0x05
     2fe:	86 81       	ldd	r24, Z+6	; 0x06
     300:	97 81       	ldd	r25, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     302:	78 94       	sei
		if (!enable) return;
     304:	ac 80       	ldd	r10, Y+4	; 0x04
     306:	bd 80       	ldd	r11, Y+5	; 0x05
     308:	ce 80       	ldd	r12, Y+6	; 0x06
     30a:	df 80       	ldd	r13, Y+7	; 0x07
     30c:	e8 84       	ldd	r14, Y+8	; 0x08
     30e:	f9 84       	ldd	r15, Y+9	; 0x09
     310:	0a 85       	ldd	r16, Y+10	; 0x0a
     312:	1b 85       	ldd	r17, Y+11	; 0x0b
     314:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__cmpdi2>
     318:	29 f1       	breq	.+74     	; 0x364 <_Z14execute_timersv+0x116>
     31a:	20 f1       	brcs	.+72     	; 0x364 <_Z14execute_timersv+0x116>
		
		the_queue.add(ventile, minutes);
     31c:	49 81       	ldd	r20, Y+1	; 0x01
     31e:	68 81       	ld	r22, Y
     320:	83 e1       	ldi	r24, 0x13	; 19
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN5queue3addEhh>
		last_executed = the_clock.now() + human_clock::MINUTE * 8;
     328:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <the_clock>
     32c:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     330:	f8 94       	cli
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	42 81       	ldd	r20, Z+2	; 0x02
     338:	53 81       	ldd	r21, Z+3	; 0x03
     33a:	64 81       	ldd	r22, Z+4	; 0x04
     33c:	75 81       	ldd	r23, Z+5	; 0x05
     33e:	86 81       	ldd	r24, Z+6	; 0x06
     340:	97 81       	ldd	r25, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     342:	78 94       	sei
     344:	20 52       	subi	r18, 0x20	; 32
     346:	3e 4f       	sbci	r19, 0xFE	; 254
     348:	4f 4f       	sbci	r20, 0xFF	; 255
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	6f 4f       	sbci	r22, 0xFF	; 255
     34e:	7f 4f       	sbci	r23, 0xFF	; 255
     350:	8f 4f       	sbci	r24, 0xFF	; 255
     352:	9f 4f       	sbci	r25, 0xFF	; 255
     354:	2c 83       	std	Y+4, r18	; 0x04
     356:	3d 83       	std	Y+5, r19	; 0x05
     358:	4e 83       	std	Y+6, r20	; 0x06
     35a:	5f 83       	std	Y+7, r21	; 0x07
     35c:	68 87       	std	Y+8, r22	; 0x08
     35e:	79 87       	std	Y+9, r23	; 0x09
     360:	8a 87       	std	Y+10, r24	; 0x0a
     362:	9b 87       	std	Y+11, r25	; 0x0b
     364:	2c 96       	adiw	r28, 0x0c	; 12
		all_timers[i].ventile = 255;
	}
}

void execute_timers(){
	for (uint8_t i = 0; i < NUM_TIMERS; ++i)
     366:	c6 15       	cp	r28, r6
     368:	d7 05       	cpc	r29, r7
     36a:	09 f0       	breq	.+2      	; 0x36e <_Z14execute_timersv+0x120>
     36c:	86 cf       	rjmp	.-244    	; 0x27a <_Z14execute_timersv+0x2c>
	{
		all_timers[i].execute();
	}
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	df 90       	pop	r13
     37c:	cf 90       	pop	r12
     37e:	bf 90       	pop	r11
     380:	af 90       	pop	r10
     382:	9f 90       	pop	r9
     384:	8f 90       	pop	r8
     386:	7f 90       	pop	r7
     388:	6f 90       	pop	r6
     38a:	08 95       	ret

0000038c <_Z18manual_queue_entryv>:



void manual_queue_entry(){
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	00 d0       	rcall	.+0      	; 0x392 <_Z18manual_queue_entryv+0x6>
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
		}
		
	};
	
	uint8_t ticks{ 8 };
	while (get_button(3)){
     396:	4b 99       	sbic	0x09, 3	; 9
     398:	e4 c0       	rjmp	.+456    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	85 b9       	out	0x05, r24	; 5
			sleep(250);
		}
		
	};
	
	uint8_t ticks{ 8 };
     39e:	28 e0       	ldi	r18, 0x08	; 8
	while (get_button(3)){
		set_led(0xFF & ( (1ul << ticks) - 1));
     3a0:	41 e0       	ldi	r20, 0x01	; 1
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	0e c0       	rjmp	.+28     	; 0x3c6 <_Z18manual_queue_entryv+0x3a>
     3aa:	db 01       	movw	r26, r22
     3ac:	ca 01       	movw	r24, r20
     3ae:	02 2e       	mov	r0, r18
     3b0:	04 c0       	rjmp	.+8      	; 0x3ba <_Z18manual_queue_entryv+0x2e>
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	aa 1f       	adc	r26, r26
     3b8:	bb 1f       	adc	r27, r27
     3ba:	0a 94       	dec	r0
     3bc:	d2 f7       	brpl	.-12     	; 0x3b2 <_Z18manual_queue_entryv+0x26>
     3be:	81 50       	subi	r24, 0x01	; 1
     3c0:	85 b9       	out	0x05, r24	; 5
		if (ticks == 0) {
     3c2:	22 23       	and	r18, r18
     3c4:	19 f0       	breq	.+6      	; 0x3cc <_Z18manual_queue_entryv+0x40>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	2b c0       	rjmp	.+86     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
void manual_queue_entry(){
	constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto abort_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
			set_led(0xFF * (i%2));
     3ce:	82 2f       	mov	r24, r18
     3d0:	81 70       	andi	r24, 0x01	; 1
     3d2:	81 95       	neg	r24
     3d4:	85 b9       	out	0x05, r24	; 5
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	e5 e6       	ldi	r30, 0x65	; 101
     3dc:	f9 e0       	ldi	r31, 0x09	; 9
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <_Z18manual_queue_entryv+0x52>
     3e2:	01 96       	adiw	r24, 0x01	; 1

#include <util/delay.h>


inline void sleep(uint32_t ms){
	for (uint32_t i = 0; i < ms/10; ++i) _delay_ms(10);
     3e4:	89 31       	cpi	r24, 0x19	; 25
     3e6:	91 05       	cpc	r25, r1
     3e8:	c1 f7       	brne	.-16     	; 0x3da <_Z18manual_queue_entryv+0x4e>

void manual_queue_entry(){
	constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto abort_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	20 31       	cpi	r18, 0x10	; 16
     3ee:	79 f7       	brne	.-34     	; 0x3ce <_Z18manual_queue_entryv+0x42>
	uint8_t ticks{ 8 };
	while (get_button(3)){
		set_led(0xFF & ( (1ul << ticks) - 1));
		if (ticks == 0) {
			abort_blink();
			the_queue.switch_off_time = the_clock.now();
     3f0:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <the_clock>
     3f4:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     3f8:	f8 94       	cli

	void set();

	inline uint64_t now() const {
		fsl::hw::stupid_atomic atomic;
		auto copy = human_clock_seconds;
     3fa:	70 81       	ld	r23, Z
     3fc:	61 81       	ldd	r22, Z+1	; 0x01
     3fe:	52 81       	ldd	r21, Z+2	; 0x02
     400:	43 81       	ldd	r20, Z+3	; 0x03
     402:	34 81       	ldd	r19, Z+4	; 0x04
     404:	25 81       	ldd	r18, Z+5	; 0x05
     406:	96 81       	ldd	r25, Z+6	; 0x06
     408:	87 81       	ldd	r24, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     40a:	78 94       	sei
     40c:	e3 e1       	ldi	r30, 0x13	; 19
     40e:	f2 e0       	ldi	r31, 0x02	; 2
     410:	75 87       	std	Z+13, r23	; 0x0d
     412:	66 87       	std	Z+14, r22	; 0x0e
     414:	57 87       	std	Z+15, r21	; 0x0f
     416:	40 8b       	std	Z+16, r20	; 0x10
     418:	31 8b       	std	Z+17, r19	; 0x11
     41a:	22 8b       	std	Z+18, r18	; 0x12
     41c:	93 8b       	std	Z+19, r25	; 0x13
     41e:	84 8b       	std	Z+20, r24	; 0x14
			return;
     420:	ab c0       	rjmp	.+342    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     422:	e5 e6       	ldi	r30, 0x65	; 101
     424:	f9 e0       	ldi	r31, 0x09	; 9
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42a:	01 96       	adiw	r24, 0x01	; 1

#include <util/delay.h>


inline void sleep(uint32_t ms){
	for (uint32_t i = 0; i < ms/10; ++i) _delay_ms(10);
     42c:	88 32       	cpi	r24, 0x28	; 40
     42e:	91 05       	cpc	r25, r1
     430:	c1 f7       	brne	.-16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		sleep(400);
		--ticks;
     432:	21 50       	subi	r18, 0x01	; 1
		}
		
	};
	
	uint8_t ticks{ 8 };
	while (get_button(3)){
     434:	4b 9b       	sbis	0x09, 3	; 9
     436:	b9 cf       	rjmp	.-142    	; 0x3aa <_Z18manual_queue_entryv+0x1e>
     438:	94 c0       	rjmp	.+296    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     43a:	e5 e6       	ldi	r30, 0x65	; 101
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	8e 31       	cpi	r24, 0x1E	; 30
     446:	91 05       	cpc	r25, r1
     448:	c1 f7       	brne	.-16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     44a:	8e c0       	rjmp	.+284    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
		--ticks;
	}
	
	sleep(300);
	//{ if (get_buttons() & abort_buttons) return; }
	if (the_queue.full()){
     44c:	20 e0       	ldi	r18, 0x00	; 0
void manual_queue_entry(){
	constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto abort_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
			set_led(0xFF * (i%2));
     44e:	82 2f       	mov	r24, r18
     450:	81 70       	andi	r24, 0x01	; 1
     452:	81 95       	neg	r24
     454:	85 b9       	out	0x05, r24	; 5
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	e5 e6       	ldi	r30, 0x65	; 101
     45c:	f9 e0       	ldi	r31, 0x09	; 9
     45e:	31 97       	sbiw	r30, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	89 31       	cpi	r24, 0x19	; 25
     466:	91 05       	cpc	r25, r1
     468:	c1 f7       	brne	.-16     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

void manual_queue_entry(){
	constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto abort_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	20 31       	cpi	r18, 0x10	; 16
     46e:	79 f7       	brne	.-34     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     470:	83 c0       	rjmp	.+262    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
		return; // abort
	}
	
	// choose ventile
	for (uint8_t i = 0; i < 10; ++i){
		set_led(0b11100000 * (i%2));
     472:	82 2f       	mov	r24, r18
     474:	81 70       	andi	r24, 0x01	; 1
     476:	83 9f       	mul	r24, r19
     478:	80 2d       	mov	r24, r0
     47a:	11 24       	eor	r1, r1
     47c:	85 b9       	out	0x05, r24	; 5
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	e5 e6       	ldi	r30, 0x65	; 101
     484:	f9 e0       	ldi	r31, 0x09	; 9
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	8e 31       	cpi	r24, 0x1E	; 30
     48e:	91 05       	cpc	r25, r1
     490:	c1 f7       	brne	.-16     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
}

inline uint8_t get_buttons(){
	return ~PIND;
     492:	89 b1       	in	r24, 0x09	; 9
		sleep(300);
		{ if (get_buttons() & abort_buttons) return; }
     494:	80 95       	com	r24
     496:	88 7e       	andi	r24, 0xE8	; 232
     498:	09 f0       	breq	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49a:	6e c0       	rjmp	.+220    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
		abort_blink();
		return; // abort
	}
	
	// choose ventile
	for (uint8_t i = 0; i < 10; ++i){
     49c:	2f 5f       	subi	r18, 0xFF	; 255
     49e:	2a 30       	cpi	r18, 0x0A	; 10
     4a0:	41 f7       	brne	.-48     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		set_led(0b11100000 * (i%2));
		sleep(300);
		{ if (get_buttons() & abort_buttons) return; }
	}
	uint8_t ventile{ 0 };
     4a2:	19 82       	std	Y+1, r1	; 0x01
	if (!get_number(ventile, 1, abort_buttons, 30)) return;
     4a4:	2e e1       	ldi	r18, 0x1E	; 30
     4a6:	48 ee       	ldi	r20, 0xE8	; 232
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z10get_numberRhhhh>
     4b2:	88 23       	and	r24, r24
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b6:	60 c0       	rjmp	.+192    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
	
	if (ventile > 2){
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	83 30       	cpi	r24, 0x03	; 3
     4bc:	98 f0       	brcs	.+38     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4be:	20 e0       	ldi	r18, 0x00	; 0
void manual_queue_entry(){
	constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto abort_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
			set_led(0xFF * (i%2));
     4c0:	82 2f       	mov	r24, r18
     4c2:	81 70       	andi	r24, 0x01	; 1
     4c4:	81 95       	neg	r24
     4c6:	85 b9       	out	0x05, r24	; 5
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	e5 e6       	ldi	r30, 0x65	; 101
     4ce:	f9 e0       	ldi	r31, 0x09	; 9
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	89 31       	cpi	r24, 0x19	; 25
     4d8:	91 05       	cpc	r25, r1
     4da:	c1 f7       	brne	.-16     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>

void manual_queue_entry(){
	constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto abort_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
     4dc:	2f 5f       	subi	r18, 0xFF	; 255
     4de:	20 31       	cpi	r18, 0x10	; 16
     4e0:	79 f7       	brne	.-34     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4e2:	4a c0       	rjmp	.+148    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
		return; // abort
	}

	// choose time
	for (uint8_t i = 0; i < 8; ++i){
		set_led(1 << ((3*i) % 8));
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	c9 01       	movw	r24, r18
     4ee:	87 70       	andi	r24, 0x07	; 7
     4f0:	99 27       	eor	r25, r25
     4f2:	ba 01       	movw	r22, r20
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f6:	66 0f       	add	r22, r22
     4f8:	77 1f       	adc	r23, r23
     4fa:	8a 95       	dec	r24
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4fe:	65 b9       	out	0x05, r22	; 5
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	e5 e6       	ldi	r30, 0x65	; 101
     506:	f9 e0       	ldi	r31, 0x09	; 9
     508:	31 97       	sbiw	r30, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	8e 31       	cpi	r24, 0x1E	; 30
     510:	91 05       	cpc	r25, r1
     512:	c1 f7       	brne	.-16     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     514:	89 b1       	in	r24, 0x09	; 9
		sleep(300);
		{ if (get_buttons() & abort_buttons) return; }
     516:	80 95       	com	r24
     518:	88 7e       	andi	r24, 0xE8	; 232
     51a:	71 f5       	brne	.+92     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     51c:	2d 5f       	subi	r18, 0xFD	; 253
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
		abort_blink();
		return; // abort
	}

	// choose time
	for (uint8_t i = 0; i < 8; ++i){
     520:	28 31       	cpi	r18, 0x18	; 24
     522:	31 05       	cpc	r19, r1
     524:	19 f7       	brne	.-58     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		set_led(1 << ((3*i) % 8));
		sleep(300);
		{ if (get_buttons() & abort_buttons) return; }
	}
	uint8_t time{ 15 };
     526:	8f e0       	ldi	r24, 0x0F	; 15
     528:	8a 83       	std	Y+2, r24	; 0x02
	if (!get_number(time, 1, abort_buttons, 30)) return;
     52a:	2e e1       	ldi	r18, 0x1E	; 30
     52c:	48 ee       	ldi	r20, 0xE8	; 232
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	ce 01       	movw	r24, r28
     532:	02 96       	adiw	r24, 0x02	; 2
     534:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z10get_numberRhhhh>
     538:	88 23       	and	r24, r24
     53a:	f1 f0       	breq	.+60     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
	
	the_queue.add(ventile, time);
     53c:	4a 81       	ldd	r20, Y+2	; 0x02
     53e:	69 81       	ldd	r22, Y+1	; 0x01
     540:	83 e1       	ldi	r24, 0x13	; 19
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN5queue3addEhh>
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	85 b9       	out	0x05, r24	; 5
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	e5 e6       	ldi	r30, 0x65	; 101
     552:	f9 e0       	ldi	r31, 0x09	; 9
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	88 3c       	cpi	r24, 0xC8	; 200
     55c:	91 05       	cpc	r25, r1
     55e:	c1 f7       	brne	.-16     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     560:	0b c0       	rjmp	.+22     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	69 cf       	rjmp	.-302    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		--ticks;
	}
	
	sleep(300);
	//{ if (get_buttons() & abort_buttons) return; }
	if (the_queue.full()){
     568:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <the_queue+0xc>
     56c:	86 30       	cpi	r24, 0x06	; 6
     56e:	09 f4       	brne	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	6d cf       	rjmp	.-294    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     572:	20 e0       	ldi	r18, 0x00	; 0
		return; // abort
	}
	
	// choose ventile
	for (uint8_t i = 0; i < 10; ++i){
		set_led(0b11100000 * (i%2));
     574:	30 ee       	ldi	r19, 0xE0	; 224
     576:	7d cf       	rjmp	.-262    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
	if (!get_number(time, 1, abort_buttons, 30)) return;
	
	the_queue.add(ventile, time);
	set_led(0xFF);
	sleep(2000);
}
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <_Z13config_changev>:

void config_change(){
     582:	2f 92       	push	r2
     584:	3f 92       	push	r3
     586:	4f 92       	push	r4
     588:	5f 92       	push	r5
     58a:	6f 92       	push	r6
     58c:	7f 92       	push	r7
     58e:	8f 92       	push	r8
     590:	9f 92       	push	r9
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
			}
		}
	};
	
	uint8_t ticks{ 8 };
	while (get_button(entry_button)){
     5a6:	48 99       	sbic	0x09, 0	; 9
     5a8:	1a c1       	rjmp	.+564    	; 0x7de <_Z13config_changev+0x25c>
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	85 b9       	out	0x05, r24	; 5
				return;
			}
		}
	};
	
	uint8_t ticks{ 8 };
     5ae:	28 e0       	ldi	r18, 0x08	; 8
	while (get_button(entry_button)){
		set_led(0xFF & ( (1ul << ticks) - 1));
     5b0:	41 e0       	ldi	r20, 0x01	; 1
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <_Z13config_changev+0x54>
     5ba:	db 01       	movw	r26, r22
     5bc:	ca 01       	movw	r24, r20
     5be:	02 2e       	mov	r0, r18
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <_Z13config_changev+0x48>
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	aa 1f       	adc	r26, r26
     5c8:	bb 1f       	adc	r27, r27
     5ca:	0a 94       	dec	r0
     5cc:	d2 f7       	brpl	.-12     	; 0x5c2 <_Z13config_changev+0x40>
     5ce:	81 50       	subi	r24, 0x01	; 1
     5d0:	85 b9       	out	0x05, r24	; 5
		if (ticks == 0) {
     5d2:	22 23       	and	r18, r18
     5d4:	19 f0       	breq	.+6      	; 0x5dc <_Z13config_changev+0x5a>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	f6 c0       	rjmp	.+492    	; 0x7c8 <_Z13config_changev+0x246>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
	constexpr uint8_t entry_button { 0 };
	//constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto confirm_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
			set_led(0xFF * (i%2));
     5de:	82 2f       	mov	r24, r18
     5e0:	81 70       	andi	r24, 0x01	; 1
     5e2:	81 95       	neg	r24
     5e4:	85 b9       	out	0x05, r24	; 5
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	c5 e6       	ldi	r28, 0x65	; 101
     5ec:	d9 e0       	ldi	r29, 0x09	; 9
     5ee:	21 97       	sbiw	r28, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <_Z13config_changev+0x6c>
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	89 31       	cpi	r24, 0x19	; 25
     5f6:	91 05       	cpc	r25, r1
     5f8:	c1 f7       	brne	.-16     	; 0x5ea <_Z13config_changev+0x68>
void config_change(){
	constexpr uint8_t entry_button { 0 };
	//constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto confirm_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
     5fa:	2f 5f       	subi	r18, 0xFF	; 255
     5fc:	20 31       	cpi	r18, 0x10	; 16
     5fe:	79 f7       	brne	.-34     	; 0x5de <_Z13config_changev+0x5c>
	};
	
	auto menu = [&]{
		bool& global_timer_enable { timer::global_timer_enable };
		bool& the_2_hr_reactivate{ pump::recovery_enable };
		human_clock::time_type auto_exit{ the_clock.now() + exit_delta };
     600:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <the_clock>
     604:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     608:	f8 94       	cli

	void set();

	inline uint64_t now() const {
		fsl::hw::stupid_atomic atomic;
		auto copy = human_clock_seconds;
     60a:	20 81       	ld	r18, Z
     60c:	31 81       	ldd	r19, Z+1	; 0x01
     60e:	42 81       	ldd	r20, Z+2	; 0x02
     610:	53 81       	ldd	r21, Z+3	; 0x03
     612:	64 81       	ldd	r22, Z+4	; 0x04
     614:	75 81       	ldd	r23, Z+5	; 0x05
     616:	86 81       	ldd	r24, Z+6	; 0x06
     618:	97 81       	ldd	r25, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     61a:	78 94       	sei
     61c:	a4 e1       	ldi	r26, 0x14	; 20
     61e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__adddi3_s8>
     622:	42 2e       	mov	r4, r18
     624:	53 2e       	mov	r5, r19
     626:	64 2e       	mov	r6, r20
     628:	75 2e       	mov	r7, r21
     62a:	86 2e       	mov	r8, r22
     62c:	97 2e       	mov	r9, r23
     62e:	28 2e       	mov	r2, r24
     630:	a9 2f       	mov	r26, r25
			// refresh led
			uint8_t status{
				(0b00000111 * global_timer_enable) | 
				(0b00111000 * the_2_hr_reactivate) |
				(0b10000000)
				};
     632:	b8 e3       	ldi	r27, 0x38	; 56
			status = status * (the_clock.now() % 2);
			set_led(status);
			// capture input
			if (get_button(0)){
				global_timer_enable = !global_timer_enable;
     634:	33 24       	eor	r3, r3
     636:	33 94       	inc	r3
	};
	const auto exit_delta = human_clock::SECOND * 20;
	
	auto confirm2 = [](human_clock::time_type& auto_exit){
		for (uint8_t i = 1; i < 9; ++i){
			set_led((uint16_t(1) << i) - 1);
     638:	e1 e0       	ldi	r30, 0x01	; 1
     63a:	f0 e0       	ldi	r31, 0x00	; 0
			// refresh led
			uint8_t status{
				(0b00000111 * global_timer_enable) | 
				(0b00111000 * the_2_hr_reactivate) |
				(0b10000000)
				};
     63c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZN5timer19global_timer_enableE>
     640:	28 2f       	mov	r18, r24
     642:	22 0f       	add	r18, r18
     644:	22 0f       	add	r18, r18
     646:	22 0f       	add	r18, r18
     648:	28 1b       	sub	r18, r24
     64a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZN4pump15recovery_enableE>
     64e:	8b 9f       	mul	r24, r27
     650:	80 2d       	mov	r24, r0
     652:	11 24       	eor	r1, r1
     654:	28 2b       	or	r18, r24
     656:	20 68       	ori	r18, 0x80	; 128
			status = status * (the_clock.now() % 2);
     658:	c0 91 03 02 	lds	r28, 0x0203	; 0x800203 <the_clock>
     65c:	d0 91 04 02 	lds	r29, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     660:	f8 94       	cli
     662:	38 81       	ld	r19, Y
     664:	49 81       	ldd	r20, Y+1	; 0x01
     666:	4a 81       	ldd	r20, Y+2	; 0x02
     668:	4b 81       	ldd	r20, Y+3	; 0x03
     66a:	4c 81       	ldd	r20, Y+4	; 0x04
     66c:	4d 81       	ldd	r20, Y+5	; 0x05
     66e:	4e 81       	ldd	r20, Y+6	; 0x06
     670:	8f 81       	ldd	r24, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     672:	78 94       	sei
     674:	83 2f       	mov	r24, r19
     676:	81 70       	andi	r24, 0x01	; 1
     678:	82 9f       	mul	r24, r18
     67a:	20 2d       	mov	r18, r0
     67c:	11 24       	eor	r1, r1
     67e:	25 b9       	out	0x05, r18	; 5
			set_led(status);
			// capture input
			if (get_button(0)){
     680:	48 99       	sbic	0x09, 0	; 9
     682:	38 c0       	rjmp	.+112    	; 0x6f4 <_Z13config_changev+0x172>
				global_timer_enable = !global_timer_enable;
     684:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZN5timer19global_timer_enableE>
     688:	83 25       	eor	r24, r3
     68a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_ZN5timer19global_timer_enableE>
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	30 e0       	ldi	r19, 0x00	; 0
	};
	const auto exit_delta = human_clock::SECOND * 20;
	
	auto confirm2 = [](human_clock::time_type& auto_exit){
		for (uint8_t i = 1; i < 9; ++i){
			set_led((uint16_t(1) << i) - 1);
     692:	cf 01       	movw	r24, r30
     694:	02 2e       	mov	r0, r18
     696:	02 c0       	rjmp	.+4      	; 0x69c <_Z13config_changev+0x11a>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <_Z13config_changev+0x116>
     6a0:	81 50       	subi	r24, 0x01	; 1
     6a2:	85 b9       	out	0x05, r24	; 5
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	c5 e6       	ldi	r28, 0x65	; 101
     6aa:	d9 e0       	ldi	r29, 0x09	; 9
     6ac:	21 97       	sbiw	r28, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <_Z13config_changev+0x12a>
     6b0:	01 96       	adiw	r24, 0x01	; 1

#include <util/delay.h>


inline void sleep(uint32_t ms){
	for (uint32_t i = 0; i < ms/10; ++i) _delay_ms(10);
     6b2:	8a 30       	cpi	r24, 0x0A	; 10
     6b4:	91 05       	cpc	r25, r1
     6b6:	c1 f7       	brne	.-16     	; 0x6a8 <_Z13config_changev+0x126>
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
		}	
	};
	const auto exit_delta = human_clock::SECOND * 20;
	
	auto confirm2 = [](human_clock::time_type& auto_exit){
		for (uint8_t i = 1; i < 9; ++i){
     6bc:	29 30       	cpi	r18, 0x09	; 9
     6be:	31 05       	cpc	r19, r1
     6c0:	41 f7       	brne	.-48     	; 0x692 <_Z13config_changev+0x110>
			set_led((uint16_t(1) << i) - 1);
			sleep(100);
		}
		auto_exit = the_clock.now() + exit_delta;
     6c2:	c0 91 03 02 	lds	r28, 0x0203	; 0x800203 <the_clock>
     6c6:	d0 91 04 02 	lds	r29, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     6ca:	f8 94       	cli

	void set();

	inline uint64_t now() const {
		fsl::hw::stupid_atomic atomic;
		auto copy = human_clock_seconds;
     6cc:	28 81       	ld	r18, Y
     6ce:	39 81       	ldd	r19, Y+1	; 0x01
     6d0:	4a 81       	ldd	r20, Y+2	; 0x02
     6d2:	5b 81       	ldd	r21, Y+3	; 0x03
     6d4:	6c 81       	ldd	r22, Y+4	; 0x04
     6d6:	7d 81       	ldd	r23, Y+5	; 0x05
     6d8:	8e 81       	ldd	r24, Y+6	; 0x06
     6da:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     6dc:	78 94       	sei
     6de:	a4 e1       	ldi	r26, 0x14	; 20
     6e0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__adddi3_s8>
     6e4:	42 2e       	mov	r4, r18
     6e6:	53 2e       	mov	r5, r19
     6e8:	64 2e       	mov	r6, r20
     6ea:	75 2e       	mov	r7, r21
     6ec:	86 2e       	mov	r8, r22
     6ee:	97 2e       	mov	r9, r23
     6f0:	28 2e       	mov	r2, r24
     6f2:	a9 2f       	mov	r26, r25
			// capture input
			if (get_button(0)){
				global_timer_enable = !global_timer_enable;
				confirm2(auto_exit);
			}
			if (get_button(1)){
     6f4:	49 99       	sbic	0x09, 1	; 9
     6f6:	38 c0       	rjmp	.+112    	; 0x768 <_Z13config_changev+0x1e6>
				the_2_hr_reactivate = !the_2_hr_reactivate;
     6f8:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZN4pump15recovery_enableE>
     6fc:	83 25       	eor	r24, r3
     6fe:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <_ZN4pump15recovery_enableE>
     702:	21 e0       	ldi	r18, 0x01	; 1
     704:	30 e0       	ldi	r19, 0x00	; 0
	};
	const auto exit_delta = human_clock::SECOND * 20;
	
	auto confirm2 = [](human_clock::time_type& auto_exit){
		for (uint8_t i = 1; i < 9; ++i){
			set_led((uint16_t(1) << i) - 1);
     706:	cf 01       	movw	r24, r30
     708:	02 2e       	mov	r0, r18
     70a:	02 c0       	rjmp	.+4      	; 0x710 <_Z13config_changev+0x18e>
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	0a 94       	dec	r0
     712:	e2 f7       	brpl	.-8      	; 0x70c <_Z13config_changev+0x18a>
     714:	81 50       	subi	r24, 0x01	; 1
     716:	85 b9       	out	0x05, r24	; 5
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	c5 e6       	ldi	r28, 0x65	; 101
     71e:	d9 e0       	ldi	r29, 0x09	; 9
     720:	21 97       	sbiw	r28, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <_Z13config_changev+0x19e>
     724:	01 96       	adiw	r24, 0x01	; 1

#include <util/delay.h>


inline void sleep(uint32_t ms){
	for (uint32_t i = 0; i < ms/10; ++i) _delay_ms(10);
     726:	8a 30       	cpi	r24, 0x0A	; 10
     728:	91 05       	cpc	r25, r1
     72a:	c1 f7       	brne	.-16     	; 0x71c <_Z13config_changev+0x19a>
     72c:	2f 5f       	subi	r18, 0xFF	; 255
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
		}	
	};
	const auto exit_delta = human_clock::SECOND * 20;
	
	auto confirm2 = [](human_clock::time_type& auto_exit){
		for (uint8_t i = 1; i < 9; ++i){
     730:	29 30       	cpi	r18, 0x09	; 9
     732:	31 05       	cpc	r19, r1
     734:	41 f7       	brne	.-48     	; 0x706 <_Z13config_changev+0x184>
			set_led((uint16_t(1) << i) - 1);
			sleep(100);
		}
		auto_exit = the_clock.now() + exit_delta;
     736:	c0 91 03 02 	lds	r28, 0x0203	; 0x800203 <the_clock>
     73a:	d0 91 04 02 	lds	r29, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     73e:	f8 94       	cli

	void set();

	inline uint64_t now() const {
		fsl::hw::stupid_atomic atomic;
		auto copy = human_clock_seconds;
     740:	28 81       	ld	r18, Y
     742:	39 81       	ldd	r19, Y+1	; 0x01
     744:	4a 81       	ldd	r20, Y+2	; 0x02
     746:	5b 81       	ldd	r21, Y+3	; 0x03
     748:	6c 81       	ldd	r22, Y+4	; 0x04
     74a:	7d 81       	ldd	r23, Y+5	; 0x05
     74c:	8e 81       	ldd	r24, Y+6	; 0x06
     74e:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     750:	78 94       	sei
     752:	a4 e1       	ldi	r26, 0x14	; 20
     754:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__adddi3_s8>
     758:	42 2e       	mov	r4, r18
     75a:	53 2e       	mov	r5, r19
     75c:	64 2e       	mov	r6, r20
     75e:	75 2e       	mov	r7, r21
     760:	86 2e       	mov	r8, r22
     762:	97 2e       	mov	r9, r23
     764:	28 2e       	mov	r2, r24
     766:	a9 2f       	mov	r26, r25
			}
			if (get_button(1)){
				the_2_hr_reactivate = !the_2_hr_reactivate;
				confirm2(auto_exit);
			}
			if (get_button(7) || auto_exit < the_clock.now() ){
     768:	4f 9b       	sbis	0x09, 7	; 9
     76a:	1b c0       	rjmp	.+54     	; 0x7a2 <_Z13config_changev+0x220>
     76c:	c0 91 03 02 	lds	r28, 0x0203	; 0x800203 <the_clock>
     770:	d0 91 04 02 	lds	r29, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     774:	f8 94       	cli
     776:	28 81       	ld	r18, Y
     778:	39 81       	ldd	r19, Y+1	; 0x01
     77a:	4a 81       	ldd	r20, Y+2	; 0x02
     77c:	5b 81       	ldd	r21, Y+3	; 0x03
     77e:	6c 81       	ldd	r22, Y+4	; 0x04
     780:	7d 81       	ldd	r23, Y+5	; 0x05
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     786:	78 94       	sei
     788:	a4 2c       	mov	r10, r4
     78a:	b5 2c       	mov	r11, r5
     78c:	c6 2c       	mov	r12, r6
     78e:	d7 2c       	mov	r13, r7
     790:	e8 2c       	mov	r14, r8
     792:	f9 2c       	mov	r15, r9
     794:	02 2d       	mov	r16, r2
     796:	1a 2f       	mov	r17, r26
     798:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__cmpdi2>
     79c:	09 f0       	breq	.+2      	; 0x7a0 <_Z13config_changev+0x21e>
     79e:	08 f4       	brcc	.+2      	; 0x7a2 <_Z13config_changev+0x220>
     7a0:	4d cf       	rjmp	.-358    	; 0x63c <_Z13config_changev+0xba>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
	constexpr uint8_t entry_button { 0 };
	//constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto confirm_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
			set_led(0xFF * (i%2));
     7a4:	82 2f       	mov	r24, r18
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	81 95       	neg	r24
     7aa:	85 b9       	out	0x05, r24	; 5
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	e5 e6       	ldi	r30, 0x65	; 101
     7b2:	f9 e0       	ldi	r31, 0x09	; 9
     7b4:	31 97       	sbiw	r30, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <_Z13config_changev+0x232>
     7b8:	01 96       	adiw	r24, 0x01	; 1

#include <util/delay.h>


inline void sleep(uint32_t ms){
	for (uint32_t i = 0; i < ms/10; ++i) _delay_ms(10);
     7ba:	89 31       	cpi	r24, 0x19	; 25
     7bc:	91 05       	cpc	r25, r1
     7be:	c1 f7       	brne	.-16     	; 0x7b0 <_Z13config_changev+0x22e>
void config_change(){
	constexpr uint8_t entry_button { 0 };
	//constexpr uint8_t abort_buttons{ 0b11101000 };
	
	auto confirm_blink = []{
		for (uint8_t i = 0; i < 16; ++i){
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	20 31       	cpi	r18, 0x10	; 16
     7c4:	79 f7       	brne	.-34     	; 0x7a4 <_Z13config_changev+0x222>
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <_Z13config_changev+0x25c>
     7c8:	c5 e6       	ldi	r28, 0x65	; 101
     7ca:	d9 e0       	ldi	r29, 0x09	; 9
     7cc:	21 97       	sbiw	r28, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <_Z13config_changev+0x24a>
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	88 32       	cpi	r24, 0x28	; 40
     7d4:	91 05       	cpc	r25, r1
     7d6:	c1 f7       	brne	.-16     	; 0x7c8 <_Z13config_changev+0x246>
			confirm_blink(); // confirm!
			// enter config menu.
			return menu();
		}
		sleep(400);
		--ticks;
     7d8:	21 50       	subi	r18, 0x01	; 1
			}
		}
	};
	
	uint8_t ticks{ 8 };
	while (get_button(entry_button)){
     7da:	48 9b       	sbis	0x09, 0	; 9
     7dc:	ee ce       	rjmp	.-548    	; 0x5ba <_Z13config_changev+0x38>
		sleep(400);
		--ticks;
	}
	return; // abort

}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	5f 90       	pop	r5
     7fc:	4f 90       	pop	r4
     7fe:	3f 90       	pop	r3
     800:	2f 90       	pop	r2
     802:	08 95       	ret

00000804 <_Z21check_manual_terminalv>:

#include <avr/io.h>


inline bool get_button(uint8_t i){
	return !(PIND & (1 << i));
     804:	89 b1       	in	r24, 0x09	; 9

void check_manual_terminal(){
	static uint8_t test_ventile{ 0 };
	
	if (get_button(7)){ // off
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	88 0f       	add	r24, r24
     80a:	89 2f       	mov	r24, r25
     80c:	88 1f       	adc	r24, r24
     80e:	99 0b       	sbc	r25, r25
     810:	91 95       	neg	r25
     812:	89 2b       	or	r24, r25
     814:	61 f4       	brne	.+24     	; 0x82e <_Z21check_manual_terminalv+0x2a>
			manual_on = true;
			time_out_manual_on = human_clock::instance().now() + 8 * human_clock::HOUR;
			return;
		}
		// turn off:
		if (manual_on) --requiries;
     816:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <the_pump+0x1>
     81a:	88 23       	and	r24, r24
     81c:	29 f0       	breq	.+10     	; 0x828 <_Z21check_manual_terminalv+0x24>
     81e:	e5 e0       	ldi	r30, 0x05	; 5
     820:	f2 e0       	ldi	r31, 0x02	; 2
     822:	80 81       	ld	r24, Z
     824:	81 50       	subi	r24, 0x01	; 1
     826:	80 83       	st	Z, r24
		manual_on = false;
     828:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <the_pump+0x1>
     82c:	08 95       	ret
		the_pump.manual(false);
		return;
	}
	if (get_button(6)){ // on
     82e:	4e 99       	sbic	0x09, 6	; 9
     830:	37 c0       	rjmp	.+110    	; 0x8a0 <_Z21check_manual_terminalv+0x9c>
	
	uint64_t time_out_manual_on{ 0 };
	
	void manual(bool on){
		if (on){
			if (!manual_on) ++requiries;
     832:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <the_pump+0x1>
     836:	81 11       	cpse	r24, r1
     838:	05 c0       	rjmp	.+10     	; 0x844 <_Z21check_manual_terminalv+0x40>
     83a:	e5 e0       	ldi	r30, 0x05	; 5
     83c:	f2 e0       	ldi	r31, 0x02	; 2
     83e:	80 81       	ld	r24, Z
     840:	8f 5f       	subi	r24, 0xFF	; 255
     842:	80 83       	st	Z, r24
			manual_on = true;
     844:	e5 e0       	ldi	r30, 0x05	; 5
     846:	f2 e0       	ldi	r31, 0x02	; 2
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	81 83       	std	Z+1, r24	; 0x01
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     84c:	f8 94       	cli

	void set();

	inline uint64_t now() const {
		fsl::hw::stupid_atomic atomic;
		auto copy = human_clock_seconds;
     84e:	a2 ef       	ldi	r26, 0xF2	; 242
     850:	b1 e0       	ldi	r27, 0x01	; 1
     852:	2c 91       	ld	r18, X
     854:	11 96       	adiw	r26, 0x01	; 1
     856:	3c 91       	ld	r19, X
     858:	11 97       	sbiw	r26, 0x01	; 1
     85a:	12 96       	adiw	r26, 0x02	; 2
     85c:	4c 91       	ld	r20, X
     85e:	12 97       	sbiw	r26, 0x02	; 2
     860:	13 96       	adiw	r26, 0x03	; 3
     862:	5c 91       	ld	r21, X
     864:	13 97       	sbiw	r26, 0x03	; 3
     866:	14 96       	adiw	r26, 0x04	; 4
     868:	6c 91       	ld	r22, X
     86a:	14 97       	sbiw	r26, 0x04	; 4
     86c:	15 96       	adiw	r26, 0x05	; 5
     86e:	7c 91       	ld	r23, X
     870:	15 97       	sbiw	r26, 0x05	; 5
     872:	16 96       	adiw	r26, 0x06	; 6
     874:	8c 91       	ld	r24, X
     876:	16 97       	sbiw	r26, 0x06	; 6
     878:	17 96       	adiw	r26, 0x07	; 7
     87a:	9c 91       	ld	r25, X
			inline ~stupid_atomic() { sei(); }
     87c:	78 94       	sei
			time_out_manual_on = human_clock::instance().now() + 8 * human_clock::HOUR;
     87e:	20 58       	subi	r18, 0x80	; 128
     880:	3f 48       	sbci	r19, 0x8F	; 143
     882:	4f 4f       	sbci	r20, 0xFF	; 255
     884:	5f 4f       	sbci	r21, 0xFF	; 255
     886:	6f 4f       	sbci	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	8f 4f       	sbci	r24, 0xFF	; 255
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	26 83       	std	Z+6, r18	; 0x06
     890:	37 83       	std	Z+7, r19	; 0x07
     892:	40 87       	std	Z+8, r20	; 0x08
     894:	51 87       	std	Z+9, r21	; 0x09
     896:	62 87       	std	Z+10, r22	; 0x0a
     898:	73 87       	std	Z+11, r23	; 0x0b
     89a:	84 87       	std	Z+12, r24	; 0x0c
     89c:	95 87       	std	Z+13, r25	; 0x0d
     89e:	08 95       	ret
		the_pump.manual(true);
		return;
	}
	if (get_button(5)){ // unsafe-on
     8a0:	4d 99       	sbic	0x09, 5	; 9
     8a2:	43 c0       	rjmp	.+134    	; 0x92a <__stack+0x2b>
	
	uint64_t time_out_manual_on{ 0 };
	
	void manual(bool on){
		if (on){
			if (!manual_on) ++requiries;
     8a4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <the_pump+0x1>
     8a8:	81 11       	cpse	r24, r1
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <_Z21check_manual_terminalv+0xb2>
     8ac:	e5 e0       	ldi	r30, 0x05	; 5
     8ae:	f2 e0       	ldi	r31, 0x02	; 2
     8b0:	80 81       	ld	r24, Z
     8b2:	8f 5f       	subi	r24, 0xFF	; 255
     8b4:	80 83       	st	Z, r24
			manual_on = true;
     8b6:	e5 e0       	ldi	r30, 0x05	; 5
     8b8:	f2 e0       	ldi	r31, 0x02	; 2
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	81 83       	std	Z+1, r24	; 0x01
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     8be:	f8 94       	cli
     8c0:	a2 ef       	ldi	r26, 0xF2	; 242
     8c2:	b1 e0       	ldi	r27, 0x01	; 1
     8c4:	2c 91       	ld	r18, X
     8c6:	11 96       	adiw	r26, 0x01	; 1
     8c8:	3c 91       	ld	r19, X
     8ca:	11 97       	sbiw	r26, 0x01	; 1
     8cc:	12 96       	adiw	r26, 0x02	; 2
     8ce:	4c 91       	ld	r20, X
     8d0:	12 97       	sbiw	r26, 0x02	; 2
     8d2:	13 96       	adiw	r26, 0x03	; 3
     8d4:	5c 91       	ld	r21, X
     8d6:	13 97       	sbiw	r26, 0x03	; 3
     8d8:	14 96       	adiw	r26, 0x04	; 4
     8da:	6c 91       	ld	r22, X
     8dc:	14 97       	sbiw	r26, 0x04	; 4
     8de:	15 96       	adiw	r26, 0x05	; 5
     8e0:	7c 91       	ld	r23, X
     8e2:	15 97       	sbiw	r26, 0x05	; 5
     8e4:	16 96       	adiw	r26, 0x06	; 6
     8e6:	8c 91       	ld	r24, X
     8e8:	16 97       	sbiw	r26, 0x06	; 6
     8ea:	17 96       	adiw	r26, 0x07	; 7
     8ec:	9c 91       	ld	r25, X
			inline ~stupid_atomic() { sei(); }
     8ee:	78 94       	sei
			time_out_manual_on = human_clock::instance().now() + 8 * human_clock::HOUR;
     8f0:	20 58       	subi	r18, 0x80	; 128
     8f2:	3f 48       	sbci	r19, 0x8F	; 143
     8f4:	4f 4f       	sbci	r20, 0xFF	; 255
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	6f 4f       	sbci	r22, 0xFF	; 255
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	8f 4f       	sbci	r24, 0xFF	; 255
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	26 83       	std	Z+6, r18	; 0x06
     902:	37 83       	std	Z+7, r19	; 0x07
     904:	40 87       	std	Z+8, r20	; 0x08
     906:	51 87       	std	Z+9, r21	; 0x09
     908:	62 87       	std	Z+10, r22	; 0x0a
     90a:	73 87       	std	Z+11, r23	; 0x0b
     90c:	84 87       	std	Z+12, r24	; 0x0c
     90e:	95 87       	std	Z+13, r25	; 0x0d
inline void turn_off_ventiles(){
	PORTC &= ~0b111;
}

inline void turn_on_pump_relay(){
	PORTC |= 0b1000;
     910:	43 9a       	sbi	0x08, 3	; 8
	}
	
	void manual_unsafe_on(){
		manual(true);
		turn_on_pump_relay();
		if (booting()){
     912:	85 81       	ldd	r24, Z+5	; 0x05
     914:	88 23       	and	r24, r24
     916:	29 f0       	breq	.+10     	; 0x922 <__stack+0x23>
	if (id > 2) return;
	PORTC |= (0b1 << id);
}

inline void turn_off_ventiles(){
	PORTC &= ~0b111;
     918:	88 b1       	in	r24, 0x08	; 8
     91a:	88 7f       	andi	r24, 0xF8	; 248
     91c:	88 b9       	out	0x08, r24	; 8
			turn_off_ventiles();
			on_boot_pending_switches = 0;
     91e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <the_pump+0x5>
		}
		safe_on = true;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <the_pump+0x2>
     928:	08 95       	ret
		the_pump.manual_unsafe_on();
		return;
	}
	
	if (get_button(4)){ // ventile test
     92a:	4c 99       	sbic	0x09, 4	; 9
     92c:	52 c0       	rjmp	.+164    	; 0x9d2 <__stack+0xd3>
		if (the_queue.running) return;
     92e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <the_queue+0x15>
     932:	81 11       	cpse	r24, r1
     934:	5b c0       	rjmp	.+182    	; 0x9ec <__stack+0xed>
		
		++test_ventile;
		test_ventile %= 6;
     936:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <_ZZ21check_manual_terminalvE12test_ventile>
     93a:	9f 5f       	subi	r25, 0xFF	; 255
     93c:	8b ea       	ldi	r24, 0xAB	; 171
     93e:	98 9f       	mul	r25, r24
     940:	81 2d       	mov	r24, r1
     942:	11 24       	eor	r1, r1
     944:	86 95       	lsr	r24
     946:	86 95       	lsr	r24
     948:	28 2f       	mov	r18, r24
     94a:	22 0f       	add	r18, r18
     94c:	82 0f       	add	r24, r18
     94e:	88 0f       	add	r24, r24
     950:	98 1b       	sub	r25, r24
     952:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <_ZZ21check_manual_terminalvE12test_ventile>
     956:	88 b1       	in	r24, 0x08	; 8
     958:	88 7f       	andi	r24, 0xF8	; 248
     95a:	88 b9       	out	0x08, r24	; 8
		turn_off_ventiles();
		if (test_ventile % 2){
     95c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_ZZ21check_manual_terminalvE12test_ventile>
     960:	80 ff       	sbrs	r24, 0
     962:	41 c0       	rjmp	.+130    	; 0x9e6 <__stack+0xe7>

#include <avr/io.h>
#include <stdint.h>

inline bool any_ventile_on(){
	return PINC & 0b111;
     964:	96 b1       	in	r25, 0x06	; 6
}

inline void turn_on_ventile(uint8_t id){
	if (any_ventile_on()) return; // for overload safety.
     966:	97 70       	andi	r25, 0x07	; 7
     968:	79 f4       	brne	.+30     	; 0x988 <__stack+0x89>
			turn_on_ventile(test_ventile / 2);
     96a:	86 95       	lsr	r24
	if (id > 2) return;
     96c:	83 30       	cpi	r24, 0x03	; 3
     96e:	60 f4       	brcc	.+24     	; 0x988 <__stack+0x89>
	PORTC |= (0b1 << id);
     970:	48 b1       	in	r20, 0x08	; 8
     972:	21 e0       	ldi	r18, 0x01	; 1
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	b9 01       	movw	r22, r18
     978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
     97a:	66 0f       	add	r22, r22
     97c:	77 1f       	adc	r23, r23
     97e:	8a 95       	dec	r24
     980:	e2 f7       	brpl	.-8      	; 0x97a <__stack+0x7b>
     982:	cb 01       	movw	r24, r22
     984:	84 2b       	or	r24, r20
     986:	88 b9       	out	0x08, r24	; 8
			the_queue.switch_off_time = the_clock.now() + 1 * human_clock::MINUTE;
     988:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <the_clock>
     98c:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     990:	f8 94       	cli
     992:	20 81       	ld	r18, Z
     994:	31 81       	ldd	r19, Z+1	; 0x01
     996:	42 81       	ldd	r20, Z+2	; 0x02
     998:	53 81       	ldd	r21, Z+3	; 0x03
     99a:	64 81       	ldd	r22, Z+4	; 0x04
     99c:	75 81       	ldd	r23, Z+5	; 0x05
     99e:	86 81       	ldd	r24, Z+6	; 0x06
     9a0:	97 81       	ldd	r25, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     9a2:	78 94       	sei
     9a4:	e3 e1       	ldi	r30, 0x13	; 19
     9a6:	f2 e0       	ldi	r31, 0x02	; 2
     9a8:	ac e3       	ldi	r26, 0x3C	; 60
     9aa:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__adddi3_s8>
     9ae:	25 87       	std	Z+13, r18	; 0x0d
     9b0:	36 87       	std	Z+14, r19	; 0x0e
     9b2:	47 87       	std	Z+15, r20	; 0x0f
     9b4:	50 8b       	std	Z+16, r21	; 0x10
     9b6:	61 8b       	std	Z+17, r22	; 0x11
     9b8:	72 8b       	std	Z+18, r23	; 0x12
     9ba:	83 8b       	std	Z+19, r24	; 0x13
     9bc:	94 8b       	std	Z+20, r25	; 0x14
     9be:	13 c0       	rjmp	.+38     	; 0x9e6 <__stack+0xe7>
     9c0:	e5 e6       	ldi	r30, 0x65	; 101
     9c2:	f9 e0       	ldi	r31, 0x09	; 9
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <__stack+0xc5>
     9c8:	01 96       	adiw	r24, 0x01	; 1

#include <util/delay.h>


inline void sleep(uint32_t ms){
	for (uint32_t i = 0; i < ms/10; ++i) _delay_ms(10);
     9ca:	86 34       	cpi	r24, 0x46	; 70
     9cc:	91 05       	cpc	r25, r1
     9ce:	c1 f7       	brne	.-16     	; 0x9c0 <__stack+0xc1>
     9d0:	08 95       	ret
		}
		sleep(700);
		return;
	}
	
	if (get_button(3)){
     9d2:	4b 99       	sbic	0x09, 3	; 9
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <__stack+0xdd>
		return manual_queue_entry();
     9d6:	0e 94 c6 01 	call	0x38c	; 0x38c <_Z18manual_queue_entryv>
     9da:	08 95       	ret
	}
	
	if (get_button(2)){ // prog config menu
     9dc:	4a 99       	sbic	0x09, 2	; 9
     9de:	06 c0       	rjmp	.+12     	; 0x9ec <__stack+0xed>
		return config_change();
     9e0:	0e 94 c1 02 	call	0x582	; 0x582 <_Z13config_changev>
     9e4:	08 95       	ret
	}
	return; // abort

}

void check_manual_terminal(){
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	ea cf       	rjmp	.-44     	; 0x9c0 <__stack+0xc1>
     9ec:	08 95       	ret

000009ee <_Z10update_ledv>:
	if (get_button(2)){ // prog config menu
		return config_change();
	}
}

void update_led(){
     9ee:	3f 92       	push	r3
     9f0:	4f 92       	push	r4
     9f2:	5f 92       	push	r5
     9f4:	6f 92       	push	r6
     9f6:	7f 92       	push	r7
     9f8:	8f 92       	push	r8
     9fa:	9f 92       	push	r9
     9fc:	af 92       	push	r10
     9fe:	bf 92       	push	r11
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29

	uint64_t now = the_clock.now();
     a10:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <the_clock>
     a14:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <the_clock+0x1>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     a18:	f8 94       	cli

	void set();

	inline uint64_t now() const {
		fsl::hw::stupid_atomic atomic;
		auto copy = human_clock_seconds;
     a1a:	b0 81       	ld	r27, Z
     a1c:	c1 81       	ldd	r28, Z+1	; 0x01
     a1e:	d2 81       	ldd	r29, Z+2	; 0x02
     a20:	93 80       	ldd	r9, Z+3	; 0x03
     a22:	84 80       	ldd	r8, Z+4	; 0x04
     a24:	75 80       	ldd	r7, Z+5	; 0x05
     a26:	66 80       	ldd	r6, Z+6	; 0x06
     a28:	f7 81       	ldd	r31, Z+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     a2a:	78 94       	sei

	bool pump_status_safe = (the_pump.safe_on && the_pump.manual_on) || (the_pump.booting() && (now % 0b10)) || (the_pump.safe_on && (!the_pump.manual_on) && (now % 0b100));
     a2c:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <the_pump+0x2>
     a30:	ee 23       	and	r30, r30
     a32:	09 f4       	brne	.+2      	; 0xa36 <_Z10update_ledv+0x48>
     a34:	85 c0       	rjmp	.+266    	; 0xb40 <_Z10update_ledv+0x152>
     a36:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <the_pump+0x1>
     a3a:	81 11       	cpse	r24, r1
     a3c:	24 c0       	rjmp	.+72     	; 0xa86 <_Z10update_ledv+0x98>
     a3e:	7b c0       	rjmp	.+246    	; 0xb36 <_Z10update_ledv+0x148>
     a40:	2b 2f       	mov	r18, r27
     a42:	21 70       	andi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__cmpdi2_s8>
     a58:	c1 f4       	brne	.+48     	; 0xa8a <_Z10update_ledv+0x9c>
     a5a:	ee 23       	and	r30, r30
     a5c:	c1 f0       	breq	.+48     	; 0xa8e <_Z10update_ledv+0xa0>
     a5e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <the_pump+0x1>
     a62:	81 11       	cpse	r24, r1
     a64:	16 c0       	rjmp	.+44     	; 0xa92 <_Z10update_ledv+0xa4>
     a66:	e1 e0       	ldi	r30, 0x01	; 1
     a68:	2b 2f       	mov	r18, r27
     a6a:	23 70       	andi	r18, 0x03	; 3
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__cmpdi2_s8>
     a80:	59 f4       	brne	.+22     	; 0xa98 <_Z10update_ledv+0xaa>
     a82:	e0 e0       	ldi	r30, 0x00	; 0
     a84:	09 c0       	rjmp	.+18     	; 0xa98 <_Z10update_ledv+0xaa>
     a86:	e1 e0       	ldi	r30, 0x01	; 1
     a88:	07 c0       	rjmp	.+14     	; 0xa98 <_Z10update_ledv+0xaa>
     a8a:	e1 e0       	ldi	r30, 0x01	; 1
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <_Z10update_ledv+0xaa>
     a8e:	e0 e0       	ldi	r30, 0x00	; 0
     a90:	03 c0       	rjmp	.+6      	; 0xa98 <_Z10update_ledv+0xaa>
     a92:	e0 e0       	ldi	r30, 0x00	; 0
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <_Z10update_ledv+0xaa>
     a96:	e1 e0       	ldi	r30, 0x01	; 1
}

inline void set_safe_on_led(bool on){
	PORTC = (PORTC & ~0b10000) | (on * 0b10000);
     a98:	88 b1       	in	r24, 0x08	; 8
     a9a:	8f 7e       	andi	r24, 0xEF	; 239
     a9c:	e2 95       	swap	r30
     a9e:	e0 7f       	andi	r30, 0xF0	; 240
     aa0:	e8 2b       	or	r30, r24
     aa2:	e8 b9       	out	0x08, r30	; 8
	set_safe_on_led(pump_status_safe);

	now %= human_clock::DAY;
     aa4:	68 94       	set
     aa6:	aa 24       	eor	r10, r10
     aa8:	a7 f8       	bld	r10, 7
     aaa:	0f 2e       	mov	r0, r31
     aac:	f1 e5       	ldi	r31, 0x51	; 81
     aae:	bf 2e       	mov	r11, r31
     ab0:	f0 2d       	mov	r31, r0
     ab2:	cc 24       	eor	r12, r12
     ab4:	c3 94       	inc	r12
     ab6:	d1 2c       	mov	r13, r1
     ab8:	e1 2c       	mov	r14, r1
     aba:	f1 2c       	mov	r15, r1
     abc:	00 e0       	ldi	r16, 0x00	; 0
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	2b 2f       	mov	r18, r27
     ac2:	3c 2f       	mov	r19, r28
     ac4:	4d 2f       	mov	r20, r29
     ac6:	59 2d       	mov	r21, r9
     ac8:	68 2d       	mov	r22, r8
     aca:	77 2d       	mov	r23, r7
     acc:	86 2d       	mov	r24, r6
     ace:	9f 2f       	mov	r25, r31
     ad0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
     ad4:	32 2e       	mov	r3, r18
     ad6:	43 2e       	mov	r4, r19
     ad8:	54 2e       	mov	r5, r20
     ada:	65 2e       	mov	r6, r21
     adc:	76 2e       	mov	r7, r22
     ade:	87 2e       	mov	r8, r23
     ae0:	98 2e       	mov	r9, r24
     ae2:	d9 2f       	mov	r29, r25
	uint8_t now_hour = now / human_clock::HOUR;
     ae4:	68 94       	set
     ae6:	aa 24       	eor	r10, r10
     ae8:	a4 f8       	bld	r10, 4
     aea:	0f 2e       	mov	r0, r31
     aec:	fe e0       	ldi	r31, 0x0E	; 14
     aee:	bf 2e       	mov	r11, r31
     af0:	f0 2d       	mov	r31, r0
     af2:	c1 2c       	mov	r12, r1
     af4:	0e 94 5f 0a 	call	0x14be	; 0x14be <__udivdi3>
     af8:	c2 2f       	mov	r28, r18
	uint8_t part_of_hour = (now % human_clock::HOUR) / (human_clock::HOUR / 8);
     afa:	23 2d       	mov	r18, r3
     afc:	34 2d       	mov	r19, r4
     afe:	45 2d       	mov	r20, r5
     b00:	56 2d       	mov	r21, r6
     b02:	67 2d       	mov	r22, r7
     b04:	78 2d       	mov	r23, r8
     b06:	89 2d       	mov	r24, r9
     b08:	9d 2f       	mov	r25, r29
     b0a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
     b0e:	0f 2e       	mov	r0, r31
     b10:	f2 ec       	ldi	r31, 0xC2	; 194
     b12:	af 2e       	mov	r10, r31
     b14:	f0 2d       	mov	r31, r0
     b16:	bb 24       	eor	r11, r11
     b18:	b3 94       	inc	r11
     b1a:	0e 94 5f 0a 	call	0x14be	; 0x14be <__udivdi3>
     b1e:	28 30       	cpi	r18, 0x08	; 8
     b20:	08 f0       	brcs	.+2      	; 0xb24 <_Z10update_ledv+0x136>
     b22:	27 e0       	ldi	r18, 0x07	; 7
	if (part_of_hour > 7) part_of_hour = 7;
	if (now_hour > 23) now_hour = 24;
     b24:	c8 31       	cpi	r28, 0x18	; 24
     b26:	08 f0       	brcs	.+2      	; 0xb2a <_Z10update_ledv+0x13c>
     b28:	c8 e1       	ldi	r28, 0x18	; 24

	set_led((now_hour << 3) | part_of_hour);
     b2a:	cc 0f       	add	r28, r28
     b2c:	cc 0f       	add	r28, r28
     b2e:	cc 0f       	add	r28, r28
     b30:	2c 2b       	or	r18, r28

#include <avr/io.h>


inline void set_led(uint8_t x){
	PORTB = x;
     b32:	25 b9       	out	0x05, r18	; 5
}
     b34:	1a c0       	rjmp	.+52     	; 0xb6a <_Z10update_ledv+0x17c>

void update_led(){

	uint64_t now = the_clock.now();

	bool pump_status_safe = (the_pump.safe_on && the_pump.manual_on) || (the_pump.booting() && (now % 0b10)) || (the_pump.safe_on && (!the_pump.manual_on) && (now % 0b100));
     b36:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <the_pump+0x5>
     b3a:	81 11       	cpse	r24, r1
     b3c:	07 c0       	rjmp	.+14     	; 0xb4c <_Z10update_ledv+0x15e>
     b3e:	93 cf       	rjmp	.-218    	; 0xa66 <_Z10update_ledv+0x78>
     b40:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <the_pump+0x5>
     b44:	81 11       	cpse	r24, r1
     b46:	7c cf       	rjmp	.-264    	; 0xa40 <_Z10update_ledv+0x52>
     b48:	e0 e0       	ldi	r30, 0x00	; 0
     b4a:	a6 cf       	rjmp	.-180    	; 0xa98 <_Z10update_ledv+0xaa>
     b4c:	2b 2f       	mov	r18, r27
     b4e:	21 70       	andi	r18, 0x01	; 1
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__cmpdi2_s8>
     b64:	09 f0       	breq	.+2      	; 0xb68 <_Z10update_ledv+0x17a>
     b66:	97 cf       	rjmp	.-210    	; 0xa96 <_Z10update_ledv+0xa8>
     b68:	7a cf       	rjmp	.-268    	; 0xa5e <_Z10update_ledv+0x70>
	uint8_t part_of_hour = (now % human_clock::HOUR) / (human_clock::HOUR / 8);
	if (part_of_hour > 7) part_of_hour = 7;
	if (now_hour > 23) now_hour = 24;

	set_led((now_hour << 3) | part_of_hour);
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	af 90       	pop	r10
     b7e:	9f 90       	pop	r9
     b80:	8f 90       	pop	r8
     b82:	7f 90       	pop	r7
     b84:	6f 90       	pop	r6
     b86:	5f 90       	pop	r5
     b88:	4f 90       	pop	r4
     b8a:	3f 90       	pop	r3
     b8c:	08 95       	ret

00000b8e <main>:

int main(void)
{
	
	pin_init();
     b8e:	0e 94 11 01 	call	0x222	; 0x222 <_Z8pin_initv>
	init_timers();
     b92:	0e 94 1c 01 	call	0x238	; 0x238 <_Z11init_timersv>
	the_clock.set();
     b96:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <the_clock>
     b9a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <the_clock+0x1>
     b9e:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN11human_clock3setEv>
	/*
	pre-configured timers:
	*/
	
	// cucumber
	all_timers[0].ventile = 0;
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f1 e0       	ldi	r31, 0x01	; 1
     ba6:	10 82       	st	Z, r1
	//all_timers[1].ventile = 0;
	all_timers[2].ventile = 0;
     ba8:	10 8e       	std	Z+24, r1	; 0x18
	all_timers[0].minutes = 15;
     baa:	8f e0       	ldi	r24, 0x0F	; 15
     bac:	81 83       	std	Z+1, r24	; 0x01
	//all_timers[1].minutes = 12;
	all_timers[2].minutes = 10;
     bae:	8a e0       	ldi	r24, 0x0A	; 10
     bb0:	81 8f       	std	Z+25, r24	; 0x19
	all_timers[0].minute_at_day = 7 * 60 + 0; // 7:00
     bb2:	44 ea       	ldi	r20, 0xA4	; 164
     bb4:	51 e0       	ldi	r21, 0x01	; 1
     bb6:	53 83       	std	Z+3, r21	; 0x03
     bb8:	42 83       	std	Z+2, r20	; 0x02
	//all_timers[1].minute_at_day = 12 * 60 + 0;
	all_timers[2].minute_at_day = 18 * 60 + 0; // 18:00
     bba:	28 e3       	ldi	r18, 0x38	; 56
     bbc:	34 e0       	ldi	r19, 0x04	; 4
     bbe:	33 8f       	std	Z+27, r19	; 0x1b
     bc0:	22 8f       	std	Z+26, r18	; 0x1a
	
	// salad
	all_timers[3].ventile = 2;
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	84 a3       	std	Z+36, r24	; 0x24
	all_timers[4].ventile = 2;
     bc6:	80 ab       	std	Z+48, r24	; 0x30
	all_timers[5].ventile = 2;
     bc8:	84 af       	std	Z+60, r24	; 0x3c
	all_timers[6].ventile = 2;
     bca:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_start+0x48>
	all_timers[3].minutes = 5;
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	85 a3       	std	Z+37, r24	; 0x25
	all_timers[4].minutes = 5;
     bd2:	81 ab       	std	Z+49, r24	; 0x31
	all_timers[5].minutes = 5;
     bd4:	85 af       	std	Z+61, r24	; 0x3d
	all_timers[6].minutes = 5;
     bd6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__data_start+0x49>
	all_timers[3].minute_at_day = 7 * 60;
     bda:	57 a3       	std	Z+39, r21	; 0x27
     bdc:	46 a3       	std	Z+38, r20	; 0x26
	all_timers[4].minute_at_day = 12 * 60;
     bde:	80 ed       	ldi	r24, 0xD0	; 208
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	93 ab       	std	Z+51, r25	; 0x33
     be4:	82 ab       	std	Z+50, r24	; 0x32
	all_timers[5].minute_at_day = 15 * 60;
     be6:	84 e8       	ldi	r24, 0x84	; 132
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	97 af       	std	Z+63, r25	; 0x3f
     bec:	86 af       	std	Z+62, r24	; 0x3e
	all_timers[6].minute_at_day = 18 * 60;
     bee:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <__data_start+0x4b>
     bf2:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <__data_start+0x4a>
	
	bool safe_on{ false };
	
	bool recovery_started{ false };
	
	bool booting(){ return on_boot_pending_switches != 0; };
     bf6:	0f 2e       	mov	r0, r31
     bf8:	f5 e0       	ldi	r31, 0x05	; 5
     bfa:	8f 2e       	mov	r8, r31
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	9f 2e       	mov	r9, r31
     c00:	f0 2d       	mov	r31, r0
		safe_on = true;
	}
	
	void execute(){
		// recovery drain.
		if (!booting() && (!the_queue.running) && recovery_enable){
     c02:	0f 2e       	mov	r0, r31
     c04:	f3 e1       	ldi	r31, 0x13	; 19
     c06:	6f 2e       	mov	r6, r31
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	7f 2e       	mov	r7, r31
     c0c:	f0 2d       	mov	r31, r0
     c0e:	c2 ef       	ldi	r28, 0xF2	; 242
     c10:	d1 e0       	ldi	r29, 0x01	; 1
			if ((human_clock::instance().now() % (human_clock::HOUR * 2)) < human_clock::MINUTE){
				if (!recovery_started){
					recovery_started = true;
     c12:	55 24       	eor	r5, r5
     c14:	53 94       	inc	r5
     c16:	68 94       	set
     c18:	33 24       	eor	r3, r3
     c1a:	37 f8       	bld	r3, 7
     c1c:	68 94       	set
     c1e:	22 24       	eor	r2, r2
     c20:	26 f8       	bld	r2, 6
			return;
		}
		// if requiries, turn on, otherwise turn off.
		if (requiries && (!is_pump_relay_on_raw())){
			turn_on_ventile(drain_ventile);
			on_boot_pending_switches = 7;
     c22:	0f 2e       	mov	r0, r31
     c24:	f7 e0       	ldi	r31, 0x07	; 7
     c26:	4f 2e       	mov	r4, r31
     c28:	f0 2d       	mov	r31, r0
		safe_on = true;
	}
	
	void execute(){
		// recovery drain.
		if (!booting() && (!the_queue.running) && recovery_enable){
     c2a:	f4 01       	movw	r30, r8
     c2c:	85 81       	ldd	r24, Z+5	; 0x05
     c2e:	81 11       	cpse	r24, r1
     c30:	20 c0       	rjmp	.+64     	; 0xc72 <main+0xe4>
     c32:	f3 01       	movw	r30, r6
     c34:	85 89       	ldd	r24, Z+21	; 0x15
     c36:	81 11       	cpse	r24, r1
     c38:	1c c0       	rjmp	.+56     	; 0xc72 <main+0xe4>
     c3a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZN4pump15recovery_enableE>
     c3e:	81 11       	cpse	r24, r1
     c40:	fd c0       	rjmp	.+506    	; 0xe3c <main+0x2ae>
     c42:	17 c0       	rjmp	.+46     	; 0xc72 <main+0xe4>
			if ((human_clock::instance().now() % (human_clock::HOUR * 2)) < human_clock::MINUTE){
				if (!recovery_started){
     c44:	f4 01       	movw	r30, r8
     c46:	83 81       	ldd	r24, Z+3	; 0x03
     c48:	81 11       	cpse	r24, r1
     c4a:	13 c0       	rjmp	.+38     	; 0xc72 <main+0xe4>
					recovery_started = true;
     c4c:	53 82       	std	Z+3, r5	; 0x03
					safe_on = false;
     c4e:	12 82       	std	Z+2, r1	; 0x02
inline void turn_on_pump_relay(){
	PORTC |= 0b1000;
}

inline void turn_off_pump_relay(){
	PORTC &= ~0b1000;
     c50:	43 98       	cbi	0x08, 3	; 8
					turn_off_pump_relay();
					++requiries;
     c52:	80 81       	ld	r24, Z
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 83       	st	Z, r24
     c58:	35 b8       	out	0x05, r3	; 5
     c5a:	25 b8       	out	0x05, r2	; 5
     c5c:	80 e2       	ldi	r24, 0x20	; 32
     c5e:	85 b9       	out	0x05, r24	; 5
     c60:	f0 e1       	ldi	r31, 0x10	; 16
     c62:	f5 b9       	out	0x05, r31	; 5
     c64:	88 e0       	ldi	r24, 0x08	; 8
     c66:	85 b9       	out	0x05, r24	; 5
     c68:	e4 e0       	ldi	r30, 0x04	; 4
     c6a:	e5 b9       	out	0x05, r30	; 5
     c6c:	f2 e0       	ldi	r31, 0x02	; 2
     c6e:	f5 b9       	out	0x05, r31	; 5
     c70:	55 b8       	out	0x05, r5	; 5
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     c72:	f8 94       	cli
     c74:	28 81       	ld	r18, Y
     c76:	39 81       	ldd	r19, Y+1	; 0x01
     c78:	4a 81       	ldd	r20, Y+2	; 0x02
     c7a:	5b 81       	ldd	r21, Y+3	; 0x03
     c7c:	6c 81       	ldd	r22, Y+4	; 0x04
     c7e:	7d 81       	ldd	r23, Y+5	; 0x05
     c80:	8e 81       	ldd	r24, Y+6	; 0x06
     c82:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     c84:	78 94       	sei
						set_led(1 << (7-i));
					}
				}
			}
		}
		if ((human_clock::instance().now() % (human_clock::HOUR * 2)) > 6 * human_clock::MINUTE){
     c86:	68 94       	set
     c88:	aa 24       	eor	r10, r10
     c8a:	a5 f8       	bld	r10, 5
     c8c:	0f 2e       	mov	r0, r31
     c8e:	fc e1       	ldi	r31, 0x1C	; 28
     c90:	bf 2e       	mov	r11, r31
     c92:	f0 2d       	mov	r31, r0
     c94:	c1 2c       	mov	r12, r1
     c96:	d1 2c       	mov	r13, r1
     c98:	e1 2c       	mov	r14, r1
     c9a:	f1 2c       	mov	r15, r1
     c9c:	00 e0       	ldi	r16, 0x00	; 0
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
     ca4:	28 36       	cpi	r18, 0x68	; 104
     ca6:	31 40       	sbci	r19, 0x01	; 1
     ca8:	41 05       	cpc	r20, r1
     caa:	51 05       	cpc	r21, r1
     cac:	61 05       	cpc	r22, r1
     cae:	71 05       	cpc	r23, r1
     cb0:	81 05       	cpc	r24, r1
     cb2:	91 05       	cpc	r25, r1
     cb4:	49 f0       	breq	.+18     	; 0xcc8 <main+0x13a>
     cb6:	40 f0       	brcs	.+16     	; 0xcc8 <main+0x13a>
			if (recovery_started){
     cb8:	f4 01       	movw	r30, r8
     cba:	83 81       	ldd	r24, Z+3	; 0x03
     cbc:	88 23       	and	r24, r24
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <main+0x13a>
				recovery_started = false;
     cc0:	13 82       	std	Z+3, r1	; 0x03
				--requiries;
     cc2:	80 81       	ld	r24, Z
     cc4:	81 50       	subi	r24, 0x01	; 1
     cc6:	80 83       	st	Z, r24
			}
		}

		if (manual_on){
     cc8:	f4 01       	movw	r30, r8
     cca:	81 81       	ldd	r24, Z+1	; 0x01
     ccc:	88 23       	and	r24, r24
     cce:	f1 f0       	breq	.+60     	; 0xd0c <main+0x17e>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     cd0:	f8 94       	cli
     cd2:	28 81       	ld	r18, Y
     cd4:	39 81       	ldd	r19, Y+1	; 0x01
     cd6:	4a 81       	ldd	r20, Y+2	; 0x02
     cd8:	5b 81       	ldd	r21, Y+3	; 0x03
     cda:	6c 81       	ldd	r22, Y+4	; 0x04
     cdc:	7d 81       	ldd	r23, Y+5	; 0x05
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     ce2:	78 94       	sei
			if (human_clock::instance().now() > time_out_manual_on){
     ce4:	a6 80       	ldd	r10, Z+6	; 0x06
     ce6:	b7 80       	ldd	r11, Z+7	; 0x07
     ce8:	c0 84       	ldd	r12, Z+8	; 0x08
     cea:	d1 84       	ldd	r13, Z+9	; 0x09
     cec:	e2 84       	ldd	r14, Z+10	; 0x0a
     cee:	f3 84       	ldd	r15, Z+11	; 0x0b
     cf0:	04 85       	ldd	r16, Z+12	; 0x0c
     cf2:	15 85       	ldd	r17, Z+13	; 0x0d
     cf4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__cmpdi2>
     cf8:	49 f0       	breq	.+18     	; 0xd0c <main+0x17e>
     cfa:	40 f0       	brcs	.+16     	; 0xd0c <main+0x17e>
			manual_on = true;
			time_out_manual_on = human_clock::instance().now() + 8 * human_clock::HOUR;
			return;
		}
		// turn off:
		if (manual_on) --requiries;
     cfc:	81 81       	ldd	r24, Z+1	; 0x01
     cfe:	88 23       	and	r24, r24
     d00:	19 f0       	breq	.+6      	; 0xd08 <main+0x17a>
     d02:	80 81       	ld	r24, Z
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	80 83       	st	Z, r24
		manual_on = false;
     d08:	f4 01       	movw	r30, r8
     d0a:	11 82       	std	Z+1, r1	; 0x01
		if (manual_on){
			if (human_clock::instance().now() > time_out_manual_on){
				manual(false);
			}
		}
		if (booting()){
     d0c:	f4 01       	movw	r30, r8
     d0e:	85 81       	ldd	r24, Z+5	; 0x05
     d10:	88 23       	and	r24, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <main+0x188>
     d14:	60 c0       	rjmp	.+192    	; 0xdd6 <main+0x248>
			if (!requiries){ // abort booting
     d16:	80 81       	ld	r24, Z
     d18:	81 11       	cpse	r24, r1
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <main+0x19a>
     d1c:	43 98       	cbi	0x08, 3	; 8
	if (id > 2) return;
	PORTC |= (0b1 << id);
}

inline void turn_off_ventiles(){
	PORTC &= ~0b111;
     d1e:	88 b1       	in	r24, 0x08	; 8
     d20:	88 7f       	andi	r24, 0xF8	; 248
     d22:	88 b9       	out	0x08, r24	; 8
				turn_off_pump_relay();
				turn_off_ventiles();
				on_boot_pending_switches = 0;
     d24:	15 82       	std	Z+5, r1	; 0x05
     d26:	80 c0       	rjmp	.+256    	; 0xe28 <main+0x29a>

#include <avr/io.h>
#include <stdint.h>

inline bool any_ventile_on(){
	return PINC & 0b111;
     d28:	86 b1       	in	r24, 0x06	; 6
}

inline void turn_on_ventile(uint8_t id){
	if (any_ventile_on()) return; // for overload safety.
     d2a:	87 70       	andi	r24, 0x07	; 7
     d2c:	09 f4       	brne	.+2      	; 0xd30 <main+0x1a2>
	if (id > 2) return;
	PORTC |= (0b1 << id);
     d2e:	41 9a       	sbi	0x08, 1	; 8
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     d30:	f8 94       	cli
     d32:	28 81       	ld	r18, Y
     d34:	39 81       	ldd	r19, Y+1	; 0x01
     d36:	4a 81       	ldd	r20, Y+2	; 0x02
     d38:	5b 81       	ldd	r21, Y+3	; 0x03
     d3a:	6c 81       	ldd	r22, Y+4	; 0x04
     d3c:	7d 81       	ldd	r23, Y+5	; 0x05
     d3e:	8e 81       	ldd	r24, Y+6	; 0x06
     d40:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     d42:	78 94       	sei
				return;
			}
			turn_on_ventile(drain_ventile);
			if (( human_clock::instance().now() + 80 - on_boot_seconds_at_next_switch ) % 80 < 20){ // can switch.
     d44:	a0 e5       	ldi	r26, 0x50	; 80
     d46:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__adddi3_s8>
     d4a:	f4 01       	movw	r30, r8
     d4c:	a4 80       	ldd	r10, Z+4	; 0x04
     d4e:	b1 2c       	mov	r11, r1
     d50:	c1 2c       	mov	r12, r1
     d52:	d1 2c       	mov	r13, r1
     d54:	e1 2c       	mov	r14, r1
     d56:	f1 2c       	mov	r15, r1
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	10 e0       	ldi	r17, 0x00	; 0
     d5c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__subdi3>
     d60:	0f 2e       	mov	r0, r31
     d62:	f0 e5       	ldi	r31, 0x50	; 80
     d64:	af 2e       	mov	r10, r31
     d66:	f0 2d       	mov	r31, r0
     d68:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
     d6c:	a3 e1       	ldi	r26, 0x13	; 19
     d6e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__cmpdi2_s8>
     d72:	11 f0       	breq	.+4      	; 0xd78 <main+0x1ea>
     d74:	08 f0       	brcs	.+2      	; 0xd78 <main+0x1ea>
     d76:	58 c0       	rjmp	.+176    	; 0xe28 <main+0x29a>
				--on_boot_pending_switches;
     d78:	f4 01       	movw	r30, r8
     d7a:	85 81       	ldd	r24, Z+5	; 0x05
     d7c:	81 50       	subi	r24, 0x01	; 1
     d7e:	85 83       	std	Z+5, r24	; 0x05
				if ((!is_pump_relay_on_raw()) || (on_boot_pending_switches == 0)){
     d80:	33 9b       	sbis	0x06, 3	; 6
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <main+0x1fa>
     d84:	81 11       	cpse	r24, r1
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <main+0x1fe>
inline void turn_off_ventiles(){
	PORTC &= ~0b111;
}

inline void turn_on_pump_relay(){
	PORTC |= 0b1000;
     d88:	43 9a       	sbi	0x08, 3	; 8
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <main+0x200>
}

inline void turn_off_pump_relay(){
	PORTC &= ~0b1000;
     d8c:	43 98       	cbi	0x08, 3	; 8
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     d8e:	f8 94       	cli
     d90:	28 81       	ld	r18, Y
     d92:	39 81       	ldd	r19, Y+1	; 0x01
     d94:	4a 81       	ldd	r20, Y+2	; 0x02
     d96:	5b 81       	ldd	r21, Y+3	; 0x03
     d98:	6c 81       	ldd	r22, Y+4	; 0x04
     d9a:	7d 81       	ldd	r23, Y+5	; 0x05
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     da0:	78 94       	sei
					turn_on_pump_relay();
					} else {
					turn_off_pump_relay();
				}
				on_boot_seconds_at_next_switch = (human_clock::instance().now() + 80 - 22) % 80; // forward switch time
     da2:	aa e3       	ldi	r26, 0x3A	; 58
     da4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__adddi3_s8>
     da8:	0f 2e       	mov	r0, r31
     daa:	f0 e5       	ldi	r31, 0x50	; 80
     dac:	af 2e       	mov	r10, r31
     dae:	f0 2d       	mov	r31, r0
     db0:	b1 2c       	mov	r11, r1
     db2:	c1 2c       	mov	r12, r1
     db4:	d1 2c       	mov	r13, r1
     db6:	e1 2c       	mov	r14, r1
     db8:	f1 2c       	mov	r15, r1
     dba:	00 e0       	ldi	r16, 0x00	; 0
     dbc:	10 e0       	ldi	r17, 0x00	; 0
     dbe:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
     dc2:	f4 01       	movw	r30, r8
     dc4:	24 83       	std	Z+4, r18	; 0x04
				if (!on_boot_pending_switches) {
     dc6:	85 81       	ldd	r24, Z+5	; 0x05
     dc8:	81 11       	cpse	r24, r1
     dca:	2e c0       	rjmp	.+92     	; 0xe28 <main+0x29a>
					safe_on = true;
     dcc:	52 82       	std	Z+2, r5	; 0x02
	if (id > 2) return;
	PORTC |= (0b1 << id);
}

inline void turn_off_ventiles(){
	PORTC &= ~0b111;
     dce:	88 b1       	in	r24, 0x08	; 8
     dd0:	88 7f       	andi	r24, 0xF8	; 248
     dd2:	88 b9       	out	0x08, r24	; 8
     dd4:	29 c0       	rjmp	.+82     	; 0xe28 <main+0x29a>
				}
			}
			return;
		}
		// if requiries, turn on, otherwise turn off.
		if (requiries && (!is_pump_relay_on_raw())){
     dd6:	f4 01       	movw	r30, r8
     dd8:	80 81       	ld	r24, Z
     dda:	88 23       	and	r24, r24
     ddc:	09 f4       	brne	.+2      	; 0xde0 <main+0x252>
     dde:	4e c0       	rjmp	.+156    	; 0xe7c <main+0x2ee>
     de0:	33 99       	sbic	0x06, 3	; 6
     de2:	22 c0       	rjmp	.+68     	; 0xe28 <main+0x29a>

#include <avr/io.h>
#include <stdint.h>

inline bool any_ventile_on(){
	return PINC & 0b111;
     de4:	86 b1       	in	r24, 0x06	; 6
}

inline void turn_on_ventile(uint8_t id){
	if (any_ventile_on()) return; // for overload safety.
     de6:	87 70       	andi	r24, 0x07	; 7
     de8:	09 f4       	brne	.+2      	; 0xdec <main+0x25e>
	if (id > 2) return;
	PORTC |= (0b1 << id);
     dea:	41 9a       	sbi	0x08, 1	; 8
			turn_on_ventile(drain_ventile);
			on_boot_pending_switches = 7;
     dec:	f4 01       	movw	r30, r8
     dee:	45 82       	std	Z+5, r4	; 0x05
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     df0:	f8 94       	cli
     df2:	28 81       	ld	r18, Y
     df4:	39 81       	ldd	r19, Y+1	; 0x01
     df6:	4a 81       	ldd	r20, Y+2	; 0x02
     df8:	5b 81       	ldd	r21, Y+3	; 0x03
     dfa:	6c 81       	ldd	r22, Y+4	; 0x04
     dfc:	7d 81       	ldd	r23, Y+5	; 0x05
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     e02:	78 94       	sei
			on_boot_seconds_at_next_switch = (human_clock::instance().now() + 80 - 22) % 80;
     e04:	aa e3       	ldi	r26, 0x3A	; 58
     e06:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__adddi3_s8>
     e0a:	0f 2e       	mov	r0, r31
     e0c:	f0 e5       	ldi	r31, 0x50	; 80
     e0e:	af 2e       	mov	r10, r31
     e10:	f0 2d       	mov	r31, r0
     e12:	b1 2c       	mov	r11, r1
     e14:	c1 2c       	mov	r12, r1
     e16:	d1 2c       	mov	r13, r1
     e18:	e1 2c       	mov	r14, r1
     e1a:	f1 2c       	mov	r15, r1
     e1c:	00 e0       	ldi	r16, 0x00	; 0
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
     e24:	f4 01       	movw	r30, r8
     e26:	24 83       	std	Z+4, r18	; 0x04
	*/
	
	while (true)
	{
		the_pump.execute();
		the_queue.execute();
     e28:	c3 01       	movw	r24, r6
     e2a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN5queue7executeEv>
		execute_timers();
     e2e:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14execute_timersv>
		check_manual_terminal();
     e32:	0e 94 02 04 	call	0x804	; 0x804 <_Z21check_manual_terminalv>
		update_led();
     e36:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_Z10update_ledv>
	all_timers[9].minute_at_day = 3 * 60 + 30;
	all_timers[8].minutes = 1;
	all_timers[9].minutes = 1;
	*/
	
	while (true)
     e3a:	f7 ce       	rjmp	.-530    	; 0xc2a <main+0x9c>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     e3c:	f8 94       	cli
     e3e:	28 81       	ld	r18, Y
     e40:	39 81       	ldd	r19, Y+1	; 0x01
     e42:	4a 81       	ldd	r20, Y+2	; 0x02
     e44:	5b 81       	ldd	r21, Y+3	; 0x03
     e46:	6c 81       	ldd	r22, Y+4	; 0x04
     e48:	7d 81       	ldd	r23, Y+5	; 0x05
     e4a:	8e 81       	ldd	r24, Y+6	; 0x06
     e4c:	9f 81       	ldd	r25, Y+7	; 0x07
			inline ~stupid_atomic() { sei(); }
     e4e:	78 94       	sei
	}
	
	void execute(){
		// recovery drain.
		if (!booting() && (!the_queue.running) && recovery_enable){
			if ((human_clock::instance().now() % (human_clock::HOUR * 2)) < human_clock::MINUTE){
     e50:	68 94       	set
     e52:	aa 24       	eor	r10, r10
     e54:	a5 f8       	bld	r10, 5
     e56:	0f 2e       	mov	r0, r31
     e58:	fc e1       	ldi	r31, 0x1C	; 28
     e5a:	bf 2e       	mov	r11, r31
     e5c:	f0 2d       	mov	r31, r0
     e5e:	c1 2c       	mov	r12, r1
     e60:	d1 2c       	mov	r13, r1
     e62:	e1 2c       	mov	r14, r1
     e64:	f1 2c       	mov	r15, r1
     e66:	00 e0       	ldi	r16, 0x00	; 0
     e68:	10 e0       	ldi	r17, 0x00	; 0
     e6a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
     e6e:	ab e3       	ldi	r26, 0x3B	; 59
     e70:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__cmpdi2_s8>
     e74:	09 f0       	breq	.+2      	; 0xe78 <main+0x2ea>
     e76:	08 f4       	brcc	.+2      	; 0xe7a <main+0x2ec>
     e78:	e5 ce       	rjmp	.-566    	; 0xc44 <main+0xb6>
     e7a:	fb ce       	rjmp	.-522    	; 0xc72 <main+0xe4>
inline void turn_on_pump_relay(){
	PORTC |= 0b1000;
}

inline void turn_off_pump_relay(){
	PORTC &= ~0b1000;
     e7c:	43 98       	cbi	0x08, 3	; 8
			on_boot_seconds_at_next_switch = (human_clock::instance().now() + 80 - 22) % 80;
			return;
		}
		if (!requiries){
			turn_off_pump_relay();
			safe_on = false;
     e7e:	f4 01       	movw	r30, r8
     e80:	12 82       	std	Z+2, r1	; 0x02
     e82:	d2 cf       	rjmp	.-92     	; 0xe28 <main+0x29a>

00000e84 <_GLOBAL__sub_I__Z8pin_initv>:

	DDRB = 0b11111111; // single leds.
	PORTB = 0;
}

human_clock& the_clock{ human_clock::instance() };
     e84:	82 ef       	ldi	r24, 0xF2	; 242
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <the_clock+0x1>
     e8c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <the_clock>
     e90:	08 95       	ret

00000e92 <_GLOBAL__sub_I_the_pump>:
#include "hardware_entities.h"
#include "time_utilities.h"
#include "display.h"
#include "queue.h"

class pump {
     e92:	e5 e0       	ldi	r30, 0x05	; 5
     e94:	f2 e0       	ldi	r31, 0x02	; 2
     e96:	10 82       	st	Z, r1
     e98:	11 82       	std	Z+1, r1	; 0x01
     e9a:	12 82       	std	Z+2, r1	; 0x02
     e9c:	13 82       	std	Z+3, r1	; 0x03
     e9e:	15 82       	std	Z+5, r1	; 0x05
     ea0:	16 82       	std	Z+6, r1	; 0x06
     ea2:	17 82       	std	Z+7, r1	; 0x07
     ea4:	10 86       	std	Z+8, r1	; 0x08
     ea6:	11 86       	std	Z+9, r1	; 0x09
     ea8:	12 86       	std	Z+10, r1	; 0x0a
     eaa:	13 86       	std	Z+11, r1	; 0x0b
     eac:	14 86       	std	Z+12, r1	; 0x0c
     eae:	15 86       	std	Z+13, r1	; 0x0d
     eb0:	08 95       	ret

00000eb2 <_ZN5queue3addEhh>:


queue the_queue;

void queue::add(uint8_t ventile, uint8_t minutes)
{
     eb2:	dc 01       	movw	r26, r24
	if (valid_items == 6) return; // buffer full;
     eb4:	1c 96       	adiw	r26, 0x0c	; 12
     eb6:	8c 91       	ld	r24, X
     eb8:	1c 97       	sbiw	r26, 0x0c	; 12
     eba:	86 30       	cpi	r24, 0x06	; 6
     ebc:	c9 f0       	breq	.+50     	; 0xef0 <_ZN5queue3addEhh+0x3e>

	if (!running){
     ebe:	55 96       	adiw	r26, 0x15	; 21
     ec0:	9c 91       	ld	r25, X
     ec2:	55 97       	sbiw	r26, 0x15	; 21
     ec4:	91 11       	cpse	r25, r1
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <_ZN5queue3addEhh+0x20>
		++the_pump.requiries;
     ec8:	e5 e0       	ldi	r30, 0x05	; 5
     eca:	f2 e0       	ldi	r31, 0x02	; 2
     ecc:	90 81       	ld	r25, Z
     ece:	9f 5f       	subi	r25, 0xFF	; 255
     ed0:	90 83       	st	Z, r25
	}
	items[valid_items].minutes = minutes;
     ed2:	e8 2f       	mov	r30, r24
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	ee 0f       	add	r30, r30
     ed8:	ff 1f       	adc	r31, r31
     eda:	ea 0f       	add	r30, r26
     edc:	fb 1f       	adc	r31, r27
     ede:	41 83       	std	Z+1, r20	; 0x01
	items[valid_items].ventile = ventile;
     ee0:	60 83       	st	Z, r22
	++valid_items;
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	1c 96       	adiw	r26, 0x0c	; 12
     ee6:	8c 93       	st	X, r24
     ee8:	1c 97       	sbiw	r26, 0x0c	; 12
	running = true;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	55 96       	adiw	r26, 0x15	; 21
     eee:	8c 93       	st	X, r24
     ef0:	08 95       	ret

00000ef2 <_ZN5queue7executeEv>:
}

void queue::execute()
{
     ef2:	4f 92       	push	r4
     ef4:	5f 92       	push	r5
     ef6:	6f 92       	push	r6
     ef8:	7f 92       	push	r7
     efa:	8f 92       	push	r8
     efc:	9f 92       	push	r9
     efe:	af 92       	push	r10
     f00:	bf 92       	push	r11
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	fc 01       	movw	r30, r24
	if (!the_pump.safe_on) return;
     f14:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <the_pump+0x2>
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <_ZN5queue7executeEv+0x2c>
     f1c:	a1 c0       	rjmp	.+322    	; 0x1060 <_ZN5queue7executeEv+0x16e>

#include <avr/io.h>
#include <stdint.h>

inline bool any_ventile_on(){
	return PINC & 0b111;
     f1e:	86 b1       	in	r24, 0x06	; 6
	if (any_ventile_on()){
     f20:	87 70       	andi	r24, 0x07	; 7
     f22:	b1 f1       	breq	.+108    	; 0xf90 <_ZN5queue7executeEv+0x9e>
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     f24:	f8 94       	cli
     f26:	a2 ef       	ldi	r26, 0xF2	; 242
     f28:	b1 e0       	ldi	r27, 0x01	; 1
     f2a:	2c 91       	ld	r18, X
     f2c:	11 96       	adiw	r26, 0x01	; 1
     f2e:	3c 91       	ld	r19, X
     f30:	11 97       	sbiw	r26, 0x01	; 1
     f32:	12 96       	adiw	r26, 0x02	; 2
     f34:	4c 91       	ld	r20, X
     f36:	12 97       	sbiw	r26, 0x02	; 2
     f38:	13 96       	adiw	r26, 0x03	; 3
     f3a:	5c 91       	ld	r21, X
     f3c:	13 97       	sbiw	r26, 0x03	; 3
     f3e:	14 96       	adiw	r26, 0x04	; 4
     f40:	6c 91       	ld	r22, X
     f42:	14 97       	sbiw	r26, 0x04	; 4
     f44:	15 96       	adiw	r26, 0x05	; 5
     f46:	7c 91       	ld	r23, X
     f48:	15 97       	sbiw	r26, 0x05	; 5
     f4a:	16 96       	adiw	r26, 0x06	; 6
     f4c:	8c 91       	ld	r24, X
     f4e:	16 97       	sbiw	r26, 0x06	; 6
     f50:	17 96       	adiw	r26, 0x07	; 7
     f52:	9c 91       	ld	r25, X
			inline ~stupid_atomic() { sei(); }
     f54:	78 94       	sei
		if (human_clock::instance().now() > switch_off_time) {
     f56:	a5 84       	ldd	r10, Z+13	; 0x0d
     f58:	b6 84       	ldd	r11, Z+14	; 0x0e
     f5a:	c7 84       	ldd	r12, Z+15	; 0x0f
     f5c:	d0 88       	ldd	r13, Z+16	; 0x10
     f5e:	e1 88       	ldd	r14, Z+17	; 0x11
     f60:	f2 88       	ldd	r15, Z+18	; 0x12
     f62:	03 89       	ldd	r16, Z+19	; 0x13
     f64:	14 89       	ldd	r17, Z+20	; 0x14
     f66:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__cmpdi2>
     f6a:	09 f0       	breq	.+2      	; 0xf6e <_ZN5queue7executeEv+0x7c>
     f6c:	08 f4       	brcc	.+2      	; 0xf70 <_ZN5queue7executeEv+0x7e>
     f6e:	78 c0       	rjmp	.+240    	; 0x1060 <_ZN5queue7executeEv+0x16e>
	if (id > 2) return;
	PORTC |= (0b1 << id);
}

inline void turn_off_ventiles(){
	PORTC &= ~0b111;
     f70:	88 b1       	in	r24, 0x08	; 8
     f72:	88 7f       	andi	r24, 0xF8	; 248
     f74:	88 b9       	out	0x08, r24	; 8
			turn_off_ventiles();
			if (!valid_items) {
     f76:	84 85       	ldd	r24, Z+12	; 0x0c
     f78:	81 11       	cpse	r24, r1
     f7a:	72 c0       	rjmp	.+228    	; 0x1060 <_ZN5queue7executeEv+0x16e>
				if (running) --the_pump.requiries;
     f7c:	85 89       	ldd	r24, Z+21	; 0x15
     f7e:	88 23       	and	r24, r24
     f80:	29 f0       	breq	.+10     	; 0xf8c <_ZN5queue7executeEv+0x9a>
     f82:	a5 e0       	ldi	r26, 0x05	; 5
     f84:	b2 e0       	ldi	r27, 0x02	; 2
     f86:	8c 91       	ld	r24, X
     f88:	81 50       	subi	r24, 0x01	; 1
     f8a:	8c 93       	st	X, r24
				running = false;
     f8c:	15 8a       	std	Z+21, r1	; 0x15
     f8e:	68 c0       	rjmp	.+208    	; 0x1060 <_ZN5queue7executeEv+0x16e>
			}
		}
		return;
	}
	if (!valid_items) return;
     f90:	84 85       	ldd	r24, Z+12	; 0x0c
     f92:	88 23       	and	r24, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <_ZN5queue7executeEv+0xa6>
     f96:	64 c0       	rjmp	.+200    	; 0x1060 <_ZN5queue7executeEv+0x16e>

#include <avr/io.h>
#include <stdint.h>

inline bool any_ventile_on(){
	return PINC & 0b111;
     f98:	86 b1       	in	r24, 0x06	; 6
}

inline void turn_on_ventile(uint8_t id){
	if (any_ventile_on()) return; // for overload safety.
     f9a:	87 70       	andi	r24, 0x07	; 7
     f9c:	69 f4       	brne	.+26     	; 0xfb8 <_ZN5queue7executeEv+0xc6>
	turn_on_ventile(items[0].ventile);
     f9e:	20 81       	ld	r18, Z
	if (id > 2) return;
     fa0:	23 30       	cpi	r18, 0x03	; 3
     fa2:	50 f4       	brcc	.+20     	; 0xfb8 <_ZN5queue7executeEv+0xc6>
	PORTC |= (0b1 << id);
     fa4:	38 b1       	in	r19, 0x08	; 8
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <_ZN5queue7executeEv+0xbe>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <_ZN5queue7executeEv+0xba>
     fb4:	83 2b       	or	r24, r19
     fb6:	88 b9       	out	0x08, r24	; 8
		class stupid_atomic {
			// << put it into an extra header and add a:
			//#warning Using this class is deprecated
			// which appears as soon as you include this header.
			public:
			inline stupid_atomic() { cli(); }
     fb8:	f8 94       	cli
     fba:	a2 ef       	ldi	r26, 0xF2	; 242
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	6c 90       	ld	r6, X
     fc0:	11 96       	adiw	r26, 0x01	; 1
     fc2:	7c 90       	ld	r7, X
     fc4:	11 97       	sbiw	r26, 0x01	; 1
     fc6:	12 96       	adiw	r26, 0x02	; 2
     fc8:	8c 90       	ld	r8, X
     fca:	12 97       	sbiw	r26, 0x02	; 2
     fcc:	13 96       	adiw	r26, 0x03	; 3
     fce:	9c 90       	ld	r9, X
     fd0:	13 97       	sbiw	r26, 0x03	; 3
     fd2:	14 96       	adiw	r26, 0x04	; 4
     fd4:	dc 91       	ld	r29, X
     fd6:	14 97       	sbiw	r26, 0x04	; 4
     fd8:	15 96       	adiw	r26, 0x05	; 5
     fda:	cc 91       	ld	r28, X
     fdc:	15 97       	sbiw	r26, 0x05	; 5
     fde:	16 96       	adiw	r26, 0x06	; 6
     fe0:	4c 90       	ld	r4, X
     fe2:	16 97       	sbiw	r26, 0x06	; 6
     fe4:	17 96       	adiw	r26, 0x07	; 7
     fe6:	5c 90       	ld	r5, X
			inline ~stupid_atomic() { sei(); }
     fe8:	78 94       	sei
	switch_off_time = human_clock::instance().now() + items[0].minutes * human_clock::MINUTE;
     fea:	21 81       	ldd	r18, Z+1	; 0x01
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 e0       	ldi	r16, 0x02	; 2
     ffc:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ashldi3>
    1000:	a2 2e       	mov	r10, r18
    1002:	b3 2e       	mov	r11, r19
    1004:	c4 2e       	mov	r12, r20
    1006:	d5 2e       	mov	r13, r21
    1008:	e6 2e       	mov	r14, r22
    100a:	f7 2e       	mov	r15, r23
    100c:	a8 2f       	mov	r26, r24
    100e:	19 2f       	mov	r17, r25
    1010:	04 e0       	ldi	r16, 0x04	; 4
    1012:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ashldi3>
    1016:	0a 2f       	mov	r16, r26
    1018:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__subdi3>
    101c:	a6 2c       	mov	r10, r6
    101e:	b7 2c       	mov	r11, r7
    1020:	c8 2c       	mov	r12, r8
    1022:	d9 2c       	mov	r13, r9
    1024:	ed 2e       	mov	r14, r29
    1026:	fc 2e       	mov	r15, r28
    1028:	04 2d       	mov	r16, r4
    102a:	15 2d       	mov	r17, r5
    102c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__adddi3>
    1030:	25 87       	std	Z+13, r18	; 0x0d
    1032:	36 87       	std	Z+14, r19	; 0x0e
    1034:	47 87       	std	Z+15, r20	; 0x0f
    1036:	50 8b       	std	Z+16, r21	; 0x10
    1038:	61 8b       	std	Z+17, r22	; 0x11
    103a:	72 8b       	std	Z+18, r23	; 0x12
    103c:	83 8b       	std	Z+19, r24	; 0x13
    103e:	94 8b       	std	Z+20, r25	; 0x14
    1040:	df 01       	movw	r26, r30
    1042:	9f 01       	movw	r18, r30
    1044:	26 5f       	subi	r18, 0xF6	; 246
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
	for (uint8_t i = 0; i + 1 < 6; ++i) items[i] = items[i+1];
    1048:	12 96       	adiw	r26, 0x02	; 2
    104a:	8d 91       	ld	r24, X+
    104c:	9c 91       	ld	r25, X
    104e:	13 97       	sbiw	r26, 0x03	; 3
    1050:	8d 93       	st	X+, r24
    1052:	9d 93       	st	X+, r25
    1054:	a2 17       	cp	r26, r18
    1056:	b3 07       	cpc	r27, r19
    1058:	b9 f7       	brne	.-18     	; 0x1048 <_ZN5queue7executeEv+0x156>
	--valid_items;
    105a:	84 85       	ldd	r24, Z+12	; 0x0c
    105c:	81 50       	subi	r24, 0x01	; 1
    105e:	84 87       	std	Z+12, r24	; 0x0c
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	4f 90       	pop	r4
    1080:	08 95       	ret

00001082 <_GLOBAL__sub_I_the_queue>:
	public:
	uint8_t ventile;
	uint8_t minutes;
};

class queue {
    1082:	e3 e1       	ldi	r30, 0x13	; 19
    1084:	f2 e0       	ldi	r31, 0x02	; 2
    1086:	14 86       	std	Z+12, r1	; 0x0c
    1088:	15 86       	std	Z+13, r1	; 0x0d
    108a:	16 86       	std	Z+14, r1	; 0x0e
    108c:	17 86       	std	Z+15, r1	; 0x0f
    108e:	10 8a       	std	Z+16, r1	; 0x10
    1090:	11 8a       	std	Z+17, r1	; 0x11
    1092:	12 8a       	std	Z+18, r1	; 0x12
    1094:	13 8a       	std	Z+19, r1	; 0x13
    1096:	14 8a       	std	Z+20, r1	; 0x14
    1098:	15 8a       	std	Z+21, r1	; 0x15
    109a:	08 95       	ret

0000109c <__vector_14>:

#include "timer0.h"

procedure TCNT0_COMPARE_A = nullptr;

ISR(TIMER0_COMPA_vect){
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
	if (TCNT0_COMPARE_A) TCNT0_COMPARE_A();
    10be:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <TCNT0_COMPARE_A>
    10c2:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <TCNT0_COMPARE_A+0x1>
    10c6:	30 97       	sbiw	r30, 0x00	; 0
    10c8:	09 f0       	breq	.+2      	; 0x10cc <__vector_14+0x30>
    10ca:	09 95       	icall
}
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	bf 91       	pop	r27
    10d2:	af 91       	pop	r26
    10d4:	9f 91       	pop	r25
    10d6:	8f 91       	pop	r24
    10d8:	7f 91       	pop	r23
    10da:	6f 91       	pop	r22
    10dc:	5f 91       	pop	r21
    10de:	4f 91       	pop	r20
    10e0:	3f 91       	pop	r19
    10e2:	2f 91       	pop	r18
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_11>:

procedure TCNT1_COMPARE_A = nullptr;

ISR(TIMER1_COMPA_vect){
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	2f 93       	push	r18
    10fa:	3f 93       	push	r19
    10fc:	4f 93       	push	r20
    10fe:	5f 93       	push	r21
    1100:	6f 93       	push	r22
    1102:	7f 93       	push	r23
    1104:	8f 93       	push	r24
    1106:	9f 93       	push	r25
    1108:	af 93       	push	r26
    110a:	bf 93       	push	r27
    110c:	ef 93       	push	r30
    110e:	ff 93       	push	r31
	if (TCNT1_COMPARE_A) TCNT1_COMPARE_A();
    1110:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <TCNT1_COMPARE_A>
    1114:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <TCNT1_COMPARE_A+0x1>
    1118:	30 97       	sbiw	r30, 0x00	; 0
    111a:	09 f0       	breq	.+2      	; 0x111e <__vector_11+0x30>
    111c:	09 95       	icall
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <_ZN11human_clock15inc_human_clockEv>:
		bool tick = clock_offsets >= CPU_FREQUENCY;
		if (tick) ++human_clock_seconds;
		clock_offsets %= CPU_FREQUENCY;
	}
	
	static void inc_human_clock(){ return instance().inc(); }
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
	private:
	volatile uint64_t human_clock_seconds{ 0 };
	volatile uint64_t clock_offsets{ 0 };
	
	inline void inc(){
		clock_offsets += 32ul * 1024;
    1154:	e2 ef       	ldi	r30, 0xF2	; 242
    1156:	f1 e0       	ldi	r31, 0x01	; 1
    1158:	20 85       	ldd	r18, Z+8	; 0x08
    115a:	31 85       	ldd	r19, Z+9	; 0x09
    115c:	42 85       	ldd	r20, Z+10	; 0x0a
    115e:	53 85       	ldd	r21, Z+11	; 0x0b
    1160:	64 85       	ldd	r22, Z+12	; 0x0c
    1162:	75 85       	ldd	r23, Z+13	; 0x0d
    1164:	86 85       	ldd	r24, Z+14	; 0x0e
    1166:	97 85       	ldd	r25, Z+15	; 0x0f
    1168:	30 58       	subi	r19, 0x80	; 128
    116a:	4f 4f       	sbci	r20, 0xFF	; 255
    116c:	5f 4f       	sbci	r21, 0xFF	; 255
    116e:	6f 4f       	sbci	r22, 0xFF	; 255
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	20 87       	std	Z+8, r18	; 0x08
    1178:	31 87       	std	Z+9, r19	; 0x09
    117a:	42 87       	std	Z+10, r20	; 0x0a
    117c:	53 87       	std	Z+11, r21	; 0x0b
    117e:	64 87       	std	Z+12, r22	; 0x0c
    1180:	75 87       	std	Z+13, r23	; 0x0d
    1182:	86 87       	std	Z+14, r24	; 0x0e
    1184:	97 87       	std	Z+15, r25	; 0x0f
		bool tick = clock_offsets >= CPU_FREQUENCY;
    1186:	20 85       	ldd	r18, Z+8	; 0x08
    1188:	31 85       	ldd	r19, Z+9	; 0x09
    118a:	42 85       	ldd	r20, Z+10	; 0x0a
    118c:	53 85       	ldd	r21, Z+11	; 0x0b
    118e:	64 85       	ldd	r22, Z+12	; 0x0c
    1190:	75 85       	ldd	r23, Z+13	; 0x0d
    1192:	86 85       	ldd	r24, Z+14	; 0x0e
    1194:	97 85       	ldd	r25, Z+15	; 0x0f
		if (tick) ++human_clock_seconds;
    1196:	2a 3d       	cpi	r18, 0xDA	; 218
    1198:	3d 4a       	sbci	r19, 0xAD	; 173
    119a:	4e 40       	sbci	r20, 0x0E	; 14
    119c:	51 05       	cpc	r21, r1
    119e:	61 05       	cpc	r22, r1
    11a0:	71 05       	cpc	r23, r1
    11a2:	81 05       	cpc	r24, r1
    11a4:	91 05       	cpc	r25, r1
    11a6:	b1 f0       	breq	.+44     	; 0x11d4 <_ZN11human_clock15inc_human_clockEv+0x94>
    11a8:	a8 f0       	brcs	.+42     	; 0x11d4 <_ZN11human_clock15inc_human_clockEv+0x94>
    11aa:	e2 ef       	ldi	r30, 0xF2	; 242
    11ac:	f1 e0       	ldi	r31, 0x01	; 1
    11ae:	20 81       	ld	r18, Z
    11b0:	31 81       	ldd	r19, Z+1	; 0x01
    11b2:	42 81       	ldd	r20, Z+2	; 0x02
    11b4:	53 81       	ldd	r21, Z+3	; 0x03
    11b6:	64 81       	ldd	r22, Z+4	; 0x04
    11b8:	75 81       	ldd	r23, Z+5	; 0x05
    11ba:	86 81       	ldd	r24, Z+6	; 0x06
    11bc:	97 81       	ldd	r25, Z+7	; 0x07
    11be:	a1 e0       	ldi	r26, 0x01	; 1
    11c0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__adddi3_s8>
    11c4:	20 83       	st	Z, r18
    11c6:	31 83       	std	Z+1, r19	; 0x01
    11c8:	42 83       	std	Z+2, r20	; 0x02
    11ca:	53 83       	std	Z+3, r21	; 0x03
    11cc:	64 83       	std	Z+4, r22	; 0x04
    11ce:	75 83       	std	Z+5, r23	; 0x05
    11d0:	86 83       	std	Z+6, r24	; 0x06
    11d2:	97 83       	std	Z+7, r25	; 0x07
		clock_offsets %= CPU_FREQUENCY;
    11d4:	c2 ef       	ldi	r28, 0xF2	; 242
    11d6:	d1 e0       	ldi	r29, 0x01	; 1
    11d8:	28 85       	ldd	r18, Y+8	; 0x08
    11da:	39 85       	ldd	r19, Y+9	; 0x09
    11dc:	4a 85       	ldd	r20, Y+10	; 0x0a
    11de:	5b 85       	ldd	r21, Y+11	; 0x0b
    11e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    11e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    11e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    11e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    11e8:	0f 2e       	mov	r0, r31
    11ea:	fb ed       	ldi	r31, 0xDB	; 219
    11ec:	af 2e       	mov	r10, r31
    11ee:	f0 2d       	mov	r31, r0
    11f0:	0f 2e       	mov	r0, r31
    11f2:	fd ea       	ldi	r31, 0xAD	; 173
    11f4:	bf 2e       	mov	r11, r31
    11f6:	f0 2d       	mov	r31, r0
    11f8:	0f 2e       	mov	r0, r31
    11fa:	fe e0       	ldi	r31, 0x0E	; 14
    11fc:	cf 2e       	mov	r12, r31
    11fe:	f0 2d       	mov	r31, r0
    1200:	d1 2c       	mov	r13, r1
    1202:	e1 2c       	mov	r14, r1
    1204:	f1 2c       	mov	r15, r1
    1206:	00 e0       	ldi	r16, 0x00	; 0
    1208:	10 e0       	ldi	r17, 0x00	; 0
    120a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__umoddi3>
    120e:	28 87       	std	Y+8, r18	; 0x08
    1210:	39 87       	std	Y+9, r19	; 0x09
    1212:	4a 87       	std	Y+10, r20	; 0x0a
    1214:	5b 87       	std	Y+11, r21	; 0x0b
    1216:	6c 87       	std	Y+12, r22	; 0x0c
    1218:	7d 87       	std	Y+13, r23	; 0x0d
    121a:	8e 87       	std	Y+14, r24	; 0x0e
    121c:	9f 87       	std	Y+15, r25	; 0x0f
	}
	
	static void inc_human_clock(){ return instance().inc(); }
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	08 95       	ret

00001234 <_ZN11human_clock3setEv>:

#include "display.h"
#include "input.h"
#include "timer0.h"

void human_clock::set(){
    1234:	3f 92       	push	r3
    1236:	4f 92       	push	r4
    1238:	5f 92       	push	r5
    123a:	6f 92       	push	r6
    123c:	7f 92       	push	r7
    123e:	8f 92       	push	r8
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	00 d0       	rcall	.+0      	; 0x1258 <_ZN11human_clock3setEv+0x24>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	4c 01       	movw	r8, r24
	human_clock_seconds = 0;
    125e:	dc 01       	movw	r26, r24
    1260:	1c 92       	st	X, r1
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	1c 92       	st	X, r1
    1266:	11 97       	sbiw	r26, 0x01	; 1
    1268:	12 96       	adiw	r26, 0x02	; 2
    126a:	1c 92       	st	X, r1
    126c:	12 97       	sbiw	r26, 0x02	; 2
    126e:	13 96       	adiw	r26, 0x03	; 3
    1270:	1c 92       	st	X, r1
    1272:	13 97       	sbiw	r26, 0x03	; 3
    1274:	14 96       	adiw	r26, 0x04	; 4
    1276:	1c 92       	st	X, r1
    1278:	14 97       	sbiw	r26, 0x04	; 4
    127a:	15 96       	adiw	r26, 0x05	; 5
    127c:	1c 92       	st	X, r1
    127e:	15 97       	sbiw	r26, 0x05	; 5
    1280:	16 96       	adiw	r26, 0x06	; 6
    1282:	1c 92       	st	X, r1
    1284:	16 97       	sbiw	r26, 0x06	; 6
    1286:	17 96       	adiw	r26, 0x07	; 7
    1288:	1c 92       	st	X, r1
	uint8_t hour{ 12 };
    128a:	8c e0       	ldi	r24, 0x0C	; 12
    128c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t minute { 30 };
    128e:	8e e1       	ldi	r24, 0x1E	; 30
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
	
	for (uint8_t i = 0; i < 9; ++i){
		uint8_t code = 1 << i;
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	70 e0       	ldi	r23, 0x00	; 0
		code = code + (code == 0) * 0xFF;
    129a:	51 e0       	ldi	r21, 0x01	; 1
    129c:	e0 e0       	ldi	r30, 0x00	; 0
	human_clock_seconds = 0;
	uint8_t hour{ 12 };
	uint8_t minute { 30 };
	
	for (uint8_t i = 0; i < 9; ++i){
		uint8_t code = 1 << i;
    129e:	cb 01       	movw	r24, r22
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <_ZN11human_clock3setEv+0x74>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <_ZN11human_clock3setEv+0x70>
		code = code + (code == 0) * 0xFF;
    12ac:	45 2f       	mov	r20, r21
    12ae:	81 11       	cpse	r24, r1
    12b0:	4e 2f       	mov	r20, r30
    12b2:	84 1b       	sub	r24, r20
    12b4:	85 b9       	out	0x05, r24	; 5
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a5 e6       	ldi	r26, 0x65	; 101
    12bc:	b9 e0       	ldi	r27, 0x09	; 9
    12be:	11 97       	sbiw	r26, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <_ZN11human_clock3setEv+0x8a>
    12c2:	01 96       	adiw	r24, 0x01	; 1

#include <util/delay.h>


inline void sleep(uint32_t ms){
	for (uint32_t i = 0; i < ms/10; ++i) _delay_ms(10);
    12c4:	88 32       	cpi	r24, 0x28	; 40
    12c6:	91 05       	cpc	r25, r1
    12c8:	c1 f7       	brne	.-16     	; 0x12ba <_ZN11human_clock3setEv+0x86>
    12ca:	2f 5f       	subi	r18, 0xFF	; 255
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
void human_clock::set(){
	human_clock_seconds = 0;
	uint8_t hour{ 12 };
	uint8_t minute { 30 };
	
	for (uint8_t i = 0; i < 9; ++i){
    12ce:	29 30       	cpi	r18, 0x09	; 9
    12d0:	31 05       	cpc	r19, r1
    12d2:	29 f7       	brne	.-54     	; 0x129e <_ZN11human_clock3setEv+0x6a>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	e5 e6       	ldi	r30, 0x65	; 101
    12da:	f9 e0       	ldi	r31, 0x09	; 9
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <_ZN11human_clock3setEv+0xa8>
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	88 3c       	cpi	r24, 0xC8	; 200
    12e4:	91 05       	cpc	r25, r1
    12e6:	c1 f7       	brne	.-16     	; 0x12d8 <_ZN11human_clock3setEv+0xa4>
    12e8:	88 ef       	ldi	r24, 0xF8	; 248
    12ea:	85 b9       	out	0x05, r24	; 5
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a5 e6       	ldi	r26, 0x65	; 101
    12f2:	b9 e0       	ldi	r27, 0x09	; 9
    12f4:	11 97       	sbiw	r26, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <_ZN11human_clock3setEv+0xc0>
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	8c 32       	cpi	r24, 0x2C	; 44
    12fc:	b1 e0       	ldi	r27, 0x01	; 1
    12fe:	9b 07       	cpc	r25, r27
    1300:	b9 f7       	brne	.-18     	; 0x12f0 <_ZN11human_clock3setEv+0xbc>
		sleep(400);
	}
	sleep(2000);
	
	publish(0b11111000);
	get_number(hour, 1);
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z10get_numberRhhhh>
    1310:	87 e0       	ldi	r24, 0x07	; 7
    1312:	85 b9       	out	0x05, r24	; 5
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	e5 e6       	ldi	r30, 0x65	; 101
    131a:	f9 e0       	ldi	r31, 0x09	; 9
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <_ZN11human_clock3setEv+0xe8>
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	8c 32       	cpi	r24, 0x2C	; 44
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	9f 07       	cpc	r25, r31
    1328:	b9 f7       	brne	.-18     	; 0x1318 <_ZN11human_clock3setEv+0xe4>
	
	publish(0b111);
	get_number(minute, 5);
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	65 e0       	ldi	r22, 0x05	; 5
    1330:	ce 01       	movw	r24, r28
    1332:	02 96       	adiw	r24, 0x02	; 2
    1334:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z10get_numberRhhhh>
	
	hour %= 24;
    1338:	99 81       	ldd	r25, Y+1	; 0x01
    133a:	8b ea       	ldi	r24, 0xAB	; 171
    133c:	98 9f       	mul	r25, r24
    133e:	81 2d       	mov	r24, r1
    1340:	11 24       	eor	r1, r1
    1342:	82 95       	swap	r24
    1344:	8f 70       	andi	r24, 0x0F	; 15
    1346:	28 e1       	ldi	r18, 0x18	; 24
    1348:	82 9f       	mul	r24, r18
    134a:	90 19       	sub	r25, r0
    134c:	11 24       	eor	r1, r1
    134e:	99 83       	std	Y+1, r25	; 0x01
	minute %= 60;
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	89 e8       	ldi	r24, 0x89	; 137
    1354:	98 9f       	mul	r25, r24
    1356:	81 2d       	mov	r24, r1
    1358:	11 24       	eor	r1, r1
    135a:	82 95       	swap	r24
    135c:	86 95       	lsr	r24
    135e:	87 70       	andi	r24, 0x07	; 7
    1360:	ac e3       	ldi	r26, 0x3C	; 60
    1362:	8a 9f       	mul	r24, r26
    1364:	90 19       	sub	r25, r0
    1366:	11 24       	eor	r1, r1
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	85 b9       	out	0x05, r24	; 5
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	e5 e6       	ldi	r30, 0x65	; 101
    1374:	f9 e0       	ldi	r31, 0x09	; 9
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <_ZN11human_clock3setEv+0x142>
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	88 3c       	cpi	r24, 0xC8	; 200
    137e:	91 05       	cpc	r25, r1
    1380:	c1 f7       	brne	.-16     	; 0x1372 <_ZN11human_clock3setEv+0x13e>
    1382:	15 b8       	out	0x05, r1	; 5
	
	set_led(0b11111111);
	sleep(2000);
	set_led(0);
	
	human_clock_seconds = hour * human_clock::HOUR + minute * human_clock::MINUTE;
    1384:	29 81       	ldd	r18, Y+1	; 0x01
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	04 e0       	ldi	r16, 0x04	; 4
    1396:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ashldi3>
    139a:	a2 2e       	mov	r10, r18
    139c:	b3 2e       	mov	r11, r19
    139e:	c4 2e       	mov	r12, r20
    13a0:	d5 2e       	mov	r13, r21
    13a2:	e6 2e       	mov	r14, r22
    13a4:	f7 2e       	mov	r15, r23
    13a6:	e8 2f       	mov	r30, r24
    13a8:	19 2f       	mov	r17, r25
    13aa:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ashldi3>
    13ae:	0e 2f       	mov	r16, r30
    13b0:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__subdi3>
    13b4:	a2 2e       	mov	r10, r18
    13b6:	b3 2e       	mov	r11, r19
    13b8:	c4 2e       	mov	r12, r20
    13ba:	d5 2e       	mov	r13, r21
    13bc:	e6 2e       	mov	r14, r22
    13be:	f7 2e       	mov	r15, r23
    13c0:	e8 2f       	mov	r30, r24
    13c2:	19 2f       	mov	r17, r25
    13c4:	04 e0       	ldi	r16, 0x04	; 4
    13c6:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ashldi3>
    13ca:	0e 2f       	mov	r16, r30
    13cc:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__subdi3>
    13d0:	32 2e       	mov	r3, r18
    13d2:	43 2e       	mov	r4, r19
    13d4:	54 2e       	mov	r5, r20
    13d6:	65 2e       	mov	r6, r21
    13d8:	76 2e       	mov	r7, r22
    13da:	b7 2f       	mov	r27, r23
    13dc:	a8 2f       	mov	r26, r24
    13de:	f9 2f       	mov	r31, r25
    13e0:	2a 81       	ldd	r18, Y+2	; 0x02
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 e0       	ldi	r16, 0x02	; 2
    13f2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ashldi3>
    13f6:	a2 2e       	mov	r10, r18
    13f8:	b3 2e       	mov	r11, r19
    13fa:	c4 2e       	mov	r12, r20
    13fc:	d5 2e       	mov	r13, r21
    13fe:	e6 2e       	mov	r14, r22
    1400:	f7 2e       	mov	r15, r23
    1402:	e8 2f       	mov	r30, r24
    1404:	19 2f       	mov	r17, r25
    1406:	04 e0       	ldi	r16, 0x04	; 4
    1408:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__ashldi3>
    140c:	0e 2f       	mov	r16, r30
    140e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__subdi3>
    1412:	a2 2e       	mov	r10, r18
    1414:	b3 2e       	mov	r11, r19
    1416:	c4 2e       	mov	r12, r20
    1418:	d5 2e       	mov	r13, r21
    141a:	e6 2e       	mov	r14, r22
    141c:	f7 2e       	mov	r15, r23
    141e:	08 2f       	mov	r16, r24
    1420:	19 2f       	mov	r17, r25
    1422:	23 2d       	mov	r18, r3
    1424:	34 2d       	mov	r19, r4
    1426:	45 2d       	mov	r20, r5
    1428:	56 2d       	mov	r21, r6
    142a:	67 2d       	mov	r22, r7
    142c:	7b 2f       	mov	r23, r27
    142e:	8a 2f       	mov	r24, r26
    1430:	9f 2f       	mov	r25, r31
    1432:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__adddi3>
    1436:	d4 01       	movw	r26, r8
    1438:	2c 93       	st	X, r18
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	3c 93       	st	X, r19
    143e:	11 97       	sbiw	r26, 0x01	; 1
    1440:	12 96       	adiw	r26, 0x02	; 2
    1442:	4c 93       	st	X, r20
    1444:	12 97       	sbiw	r26, 0x02	; 2
    1446:	13 96       	adiw	r26, 0x03	; 3
    1448:	5c 93       	st	X, r21
    144a:	13 97       	sbiw	r26, 0x03	; 3
    144c:	14 96       	adiw	r26, 0x04	; 4
    144e:	6c 93       	st	X, r22
    1450:	14 97       	sbiw	r26, 0x04	; 4
    1452:	15 96       	adiw	r26, 0x05	; 5
    1454:	7c 93       	st	X, r23
    1456:	15 97       	sbiw	r26, 0x05	; 5
    1458:	16 96       	adiw	r26, 0x06	; 6
    145a:	8c 93       	st	X, r24
    145c:	16 97       	sbiw	r26, 0x06	; 6
    145e:	17 96       	adiw	r26, 0x07	; 7
    1460:	9c 93       	st	X, r25
using procedure = void (*)();

extern procedure TCNT0_COMPARE_A;

inline void reset_timer_0(){ // 8-bit timer
	TCCR0B &= 0b11111000;
    1462:	85 b5       	in	r24, 0x25	; 37
    1464:	88 7f       	andi	r24, 0xF8	; 248
    1466:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
    1468:	16 bc       	out	0x26, r1	; 38
inline void start_timer_prescaler_64(){	TCCR0B |= 0b00000011;	}

inline void start_timer_prescaler_1024(){	TCCR0B |= 0b00000101;	}

inline void activate_timer0_compare_match_interrupt_A(uint8_t compareTo, procedure interrupt, bool enable_ctc_on_compare_A){ // set compare value and interrupt routine.
	OCR0A = compareTo;
    146a:	80 e2       	ldi	r24, 0x20	; 32
    146c:	87 bd       	out	0x27, r24	; 39
	TCNT0_COMPARE_A = interrupt;
    146e:	80 ea       	ldi	r24, 0xA0	; 160
    1470:	98 e0       	ldi	r25, 0x08	; 8
    1472:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <TCNT0_COMPARE_A+0x1>
    1476:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <TCNT0_COMPARE_A>
	TIMSK0 |= 1 << OCIE0A; // enable interrupt;
    147a:	ee e6       	ldi	r30, 0x6E	; 110
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	82 60       	ori	r24, 0x02	; 2
    1482:	80 83       	st	Z, r24
	sei(); // global interrupt enable;
    1484:	78 94       	sei
	if (enable_ctc_on_compare_A){
		TCCR0A |= 1 << WGM01;
    1486:	84 b5       	in	r24, 0x24	; 36
    1488:	82 60       	ori	r24, 0x02	; 2
    148a:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
}

inline void start_timer_prescaler_64(){	TCCR0B |= 0b00000011;	}

inline void start_timer_prescaler_1024(){	TCCR0B |= 0b00000101;	}
    148c:	85 b5       	in	r24, 0x25	; 37
    148e:	85 60       	ori	r24, 0x05	; 5
    1490:	85 bd       	out	0x25, r24	; 37
	
	reset_timer_0();
	activate_timer0_compare_match_interrupt_A(32, human_clock::inc_human_clock, true);
	start_timer_prescaler_1024();
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	9f 90       	pop	r9
    14ac:	8f 90       	pop	r8
    14ae:	7f 90       	pop	r7
    14b0:	6f 90       	pop	r6
    14b2:	5f 90       	pop	r5
    14b4:	4f 90       	pop	r4
    14b6:	3f 90       	pop	r3
    14b8:	08 95       	ret

000014ba <__umoddi3>:
    14ba:	68 94       	set
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <__udivdi3_umoddi3>

000014be <__udivdi3>:
    14be:	e8 94       	clt

000014c0 <__udivdi3_umoddi3>:
    14c0:	8f 92       	push	r8
    14c2:	9f 92       	push	r9
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__udivmod64>
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	08 95       	ret

000014d6 <__udivmod64>:
    14d6:	88 24       	eor	r8, r8
    14d8:	99 24       	eor	r9, r9
    14da:	f4 01       	movw	r30, r8
    14dc:	e4 01       	movw	r28, r8
    14de:	b0 e4       	ldi	r27, 0x40	; 64
    14e0:	9f 93       	push	r25
    14e2:	aa 27       	eor	r26, r26
    14e4:	9a 15       	cp	r25, r10
    14e6:	8b 04       	cpc	r8, r11
    14e8:	9c 04       	cpc	r9, r12
    14ea:	ed 05       	cpc	r30, r13
    14ec:	fe 05       	cpc	r31, r14
    14ee:	cf 05       	cpc	r28, r15
    14f0:	d0 07       	cpc	r29, r16
    14f2:	a1 07       	cpc	r26, r17
    14f4:	98 f4       	brcc	.+38     	; 0x151c <__udivmod64+0x46>
    14f6:	ad 2f       	mov	r26, r29
    14f8:	dc 2f       	mov	r29, r28
    14fa:	cf 2f       	mov	r28, r31
    14fc:	fe 2f       	mov	r31, r30
    14fe:	e9 2d       	mov	r30, r9
    1500:	98 2c       	mov	r9, r8
    1502:	89 2e       	mov	r8, r25
    1504:	98 2f       	mov	r25, r24
    1506:	87 2f       	mov	r24, r23
    1508:	76 2f       	mov	r23, r22
    150a:	65 2f       	mov	r22, r21
    150c:	54 2f       	mov	r21, r20
    150e:	43 2f       	mov	r20, r19
    1510:	32 2f       	mov	r19, r18
    1512:	22 27       	eor	r18, r18
    1514:	b8 50       	subi	r27, 0x08	; 8
    1516:	31 f7       	brne	.-52     	; 0x14e4 <__udivmod64+0xe>
    1518:	bf 91       	pop	r27
    151a:	27 c0       	rjmp	.+78     	; 0x156a <__udivmod64+0x94>
    151c:	1b 2e       	mov	r1, r27
    151e:	bf 91       	pop	r27
    1520:	bb 27       	eor	r27, r27
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	44 1f       	adc	r20, r20
    1528:	55 1f       	adc	r21, r21
    152a:	66 1f       	adc	r22, r22
    152c:	77 1f       	adc	r23, r23
    152e:	88 1f       	adc	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	88 1c       	adc	r8, r8
    1534:	99 1c       	adc	r9, r9
    1536:	ee 1f       	adc	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	cc 1f       	adc	r28, r28
    153c:	dd 1f       	adc	r29, r29
    153e:	aa 1f       	adc	r26, r26
    1540:	bb 1f       	adc	r27, r27
    1542:	8a 14       	cp	r8, r10
    1544:	9b 04       	cpc	r9, r11
    1546:	ec 05       	cpc	r30, r12
    1548:	fd 05       	cpc	r31, r13
    154a:	ce 05       	cpc	r28, r14
    154c:	df 05       	cpc	r29, r15
    154e:	a0 07       	cpc	r26, r16
    1550:	b1 07       	cpc	r27, r17
    1552:	48 f0       	brcs	.+18     	; 0x1566 <__udivmod64+0x90>
    1554:	8a 18       	sub	r8, r10
    1556:	9b 08       	sbc	r9, r11
    1558:	ec 09       	sbc	r30, r12
    155a:	fd 09       	sbc	r31, r13
    155c:	ce 09       	sbc	r28, r14
    155e:	df 09       	sbc	r29, r15
    1560:	a0 0b       	sbc	r26, r16
    1562:	b1 0b       	sbc	r27, r17
    1564:	21 60       	ori	r18, 0x01	; 1
    1566:	1a 94       	dec	r1
    1568:	e1 f6       	brne	.-72     	; 0x1522 <__udivmod64+0x4c>
    156a:	2e f4       	brtc	.+10     	; 0x1576 <__udivmod64+0xa0>
    156c:	94 01       	movw	r18, r8
    156e:	af 01       	movw	r20, r30
    1570:	be 01       	movw	r22, r28
    1572:	cd 01       	movw	r24, r26
    1574:	00 0c       	add	r0, r0
    1576:	08 95       	ret

00001578 <__ashldi3>:
    1578:	0f 93       	push	r16
    157a:	08 30       	cpi	r16, 0x08	; 8
    157c:	90 f0       	brcs	.+36     	; 0x15a2 <__ashldi3+0x2a>
    157e:	98 2f       	mov	r25, r24
    1580:	87 2f       	mov	r24, r23
    1582:	76 2f       	mov	r23, r22
    1584:	65 2f       	mov	r22, r21
    1586:	54 2f       	mov	r21, r20
    1588:	43 2f       	mov	r20, r19
    158a:	32 2f       	mov	r19, r18
    158c:	22 27       	eor	r18, r18
    158e:	08 50       	subi	r16, 0x08	; 8
    1590:	f4 cf       	rjmp	.-24     	; 0x157a <__ashldi3+0x2>
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	44 1f       	adc	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	66 1f       	adc	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	88 1f       	adc	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 95       	dec	r16
    15a4:	b2 f7       	brpl	.-20     	; 0x1592 <__ashldi3+0x1a>
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <__adddi3>:
    15aa:	2a 0d       	add	r18, r10
    15ac:	3b 1d       	adc	r19, r11
    15ae:	4c 1d       	adc	r20, r12
    15b0:	5d 1d       	adc	r21, r13
    15b2:	6e 1d       	adc	r22, r14
    15b4:	7f 1d       	adc	r23, r15
    15b6:	80 1f       	adc	r24, r16
    15b8:	91 1f       	adc	r25, r17
    15ba:	08 95       	ret

000015bc <__adddi3_s8>:
    15bc:	00 24       	eor	r0, r0
    15be:	a7 fd       	sbrc	r26, 7
    15c0:	00 94       	com	r0
    15c2:	2a 0f       	add	r18, r26
    15c4:	30 1d       	adc	r19, r0
    15c6:	40 1d       	adc	r20, r0
    15c8:	50 1d       	adc	r21, r0
    15ca:	60 1d       	adc	r22, r0
    15cc:	70 1d       	adc	r23, r0
    15ce:	80 1d       	adc	r24, r0
    15d0:	90 1d       	adc	r25, r0
    15d2:	08 95       	ret

000015d4 <__subdi3>:
    15d4:	2a 19       	sub	r18, r10
    15d6:	3b 09       	sbc	r19, r11
    15d8:	4c 09       	sbc	r20, r12
    15da:	5d 09       	sbc	r21, r13
    15dc:	6e 09       	sbc	r22, r14
    15de:	7f 09       	sbc	r23, r15
    15e0:	80 0b       	sbc	r24, r16
    15e2:	91 0b       	sbc	r25, r17
    15e4:	08 95       	ret

000015e6 <__cmpdi2>:
    15e6:	2a 15       	cp	r18, r10
    15e8:	3b 05       	cpc	r19, r11
    15ea:	4c 05       	cpc	r20, r12
    15ec:	5d 05       	cpc	r21, r13
    15ee:	6e 05       	cpc	r22, r14
    15f0:	7f 05       	cpc	r23, r15
    15f2:	80 07       	cpc	r24, r16
    15f4:	91 07       	cpc	r25, r17
    15f6:	08 95       	ret

000015f8 <__cmpdi2_s8>:
    15f8:	00 24       	eor	r0, r0
    15fa:	a7 fd       	sbrc	r26, 7
    15fc:	00 94       	com	r0
    15fe:	2a 17       	cp	r18, r26
    1600:	30 05       	cpc	r19, r0
    1602:	40 05       	cpc	r20, r0
    1604:	50 05       	cpc	r21, r0
    1606:	60 05       	cpc	r22, r0
    1608:	70 05       	cpc	r23, r0
    160a:	80 05       	cpc	r24, r0
    160c:	90 05       	cpc	r25, r0
    160e:	08 95       	ret

00001610 <__tablejump2__>:
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	05 90       	lpm	r0, Z+
    1616:	f4 91       	lpm	r31, Z
    1618:	e0 2d       	mov	r30, r0
    161a:	09 94       	ijmp

0000161c <_exit>:
    161c:	f8 94       	cli

0000161e <__stop_program>:
    161e:	ff cf       	rjmp	.-2      	; 0x161e <__stop_program>

trigger:
  branches:
    include:
    - '*'
    exclude:
    - artifacts

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
strategy:
  matrix:
#    ubuntu_20_04_gcc_9:
#      imageName: 'ubuntu-20.04'
##      CC: gcc-9
##      CXX: g++-9
#      the_name: 'Azure Pipelines'

    ubuntu_18_04_gcc_8:
      imageName: 'ubuntu-18.04'
      the_name: 'Azure Pipelines'

#    ubuntu_16_04_gcc_8:
#      imageName: 'ubuntu-16.04'
#      CC: gcc-9
#      CXX: g++-9
#      the_name: 'Azure Pipelines'

#    mac_10_15:
#      imageName: 'macos-10.15'
#      the_name: 'Azure Pipelines'
    mac_10_14: #fails since with Apple toolchain std::filesystem::path is not available before macos-10-15
      imageName: 'macos-10.14'
      the_name: 'Azure Pipelines'

    windows_2019:
      imageName: 'windows-2019'
      the_name: 'Azure Pipelines'
#    windows_2016: # executing tests on CI fails. Remove some test/compile_headers files to make it run.
#      imageName: 'vs2017-win2016'
#      the_name: 'Azure Pipelines'
    
#    Aria:
#      the_name: 'Performance'


pool:
  vmImage: $(imageName)
  name: $(the_name)


steps:
 - script: git submodule update --init --recursive
   displayName: "Init Git Submodules"
   condition: succeeded()
 - script: git clone https://github.com/mkleemann/cmake-avr.git ./avr-toolchain/
   displayName: "Get Tools"
 - script: |
    mkdir -p build
    cd ./build/
    tree
    cmake -DCMAKE_TOOLCHAIN_FILE=../avr-toolchain/generic-gcc-avr.cmake ../avr-toolchain/example
    tree
    make
    tree
   displayName: "Run"
# - script: ./script/ci/create-deploy-include-dependency-graph.sh "$(GIT_USERNAME)" "$(GIT_ACCESS_TOKEN)" "$(System.PullRequest.PullRequestNumber)"
#   displayName: "Create and deploy #include dependency graph"
#   condition: and(succeeded(), ne( variables['Agent.OSArchitecture'], 'ARM'), eq( variables['Agent.OS'], 'Linux'))
# - script: ./script/ci/check-compile-header-test-integrity.sh
#   displayName: "Check compile header test integrity"
#   condition: and(succeeded(), ne( variables['Agent.OSArchitecture'], 'ARM'), ne( variables['Agent.OS'], 'Windows_NT'))
 - script: cmake -S . -B ./build/
   displayName: "CMake: Create Project"
   condition: succeeded()
 - script: cmake --build ./build
   displayName: "CMake: Compile and Link"
   condition: succeeded()

# - script: ./build/test/TEST-Mona-Controller
#   displayName: "Run Tests on Linux / Mac OS"
#   condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
# - script: .\build\test\Debug\TEST-Mona-Controller.exe
#   displayName: "Run Tests on Windows"
#   condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
